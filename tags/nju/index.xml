<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>NJU on StardustDL's Blog</title><link>https://stardustdl.github.io/tags/nju/</link><description>Recent content in NJU on StardustDL's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 05 Nov 2018 17:30:22 +0800</lastBuildDate><atom:link href="https://stardustdl.github.io/tags/nju/index.xml" rel="self" type="application/rss+xml"/><item><title>NJU ICS Programming Assignment 代码分析 - NANOS-LITE</title><link>https://stardustdl.github.io/posts/learning/nju-icspa-analytics-nanos-lite/</link><pubDate>Mon, 05 Nov 2018 17:30:22 +0800</pubDate><guid>https://stardustdl.github.io/posts/learning/nju-icspa-analytics-nanos-lite/</guid><description>概述 框架代码库 CPU 架构：x64 操作系统: GNU/Linux 编译器: GCC 编程语言：C 语言 Nanos-lite是南京大学操作系统Nanos的裁剪版。可运行在 x86-nemu 的 AM 上。
框架代码结构 nanos-lite/ # NANOS-LITE 项目 include/ # 头文件 src/ # 源文件 device.c # 设备抽象 fs.c # 文件系统 files.h # ramdisk 中的文件描述 initrd.S # ramdisk设备 irq.c # 中断异常处理 loader.c # 加载器 main.c # 主程序 mm.c # 存储管理 proc.c # 进程调度 ramdisk.c # ramdisk驱动程序 syscall.c # 系统调用处理 syscall.h # 系统调用相关宏 Makefile navy-apps/ nemu/ nexus-am/ include/ common.</description></item><item><title>NJU ICS Programming Assignment 代码分析 - NAVY-APPS</title><link>https://stardustdl.github.io/posts/learning/nju-icspa-analytics-navy-apps/</link><pubDate>Mon, 05 Nov 2018 17:30:22 +0800</pubDate><guid>https://stardustdl.github.io/posts/learning/nju-icspa-analytics-navy-apps/</guid><description>概述 框架代码库 CPU 架构：x64 操作系统: GNU/Linux 编译器: GCC 编程语言：C 语言 Navy-Apps 提供一系列运行在 Nanos-lite 上的用户程序，也包含了 Newlib 库。
框架代码结构 nanos-lite/ navy-apps/ apps/ # 用户程序 am-apps/ Makefile init/ litenes/ lua/ nterm/ nwm/ pal/ # 仙剑奇侠传 slider/ fsimg/ # 根文件系统 libs/ # 库 libc/ # Newlib C库 libos/ # 系统调用的用户层封装 syscall.h # 系统调用类型 tests/ # 一些测试 nemu/ nexus-am/ libs/libos/syscall.h 与 nanos-lite/syscall.h 相同。 libs/ libc/ Newlib 项目, 它是一个专门为嵌入式系统提供的 C 库, 库中的函数对运行时环境的要求极低. 这对Nanos-lite来说是非常友好的, 我们不需要为了配合C库而在Nanos-lite中实现额外的功能.</description></item><item><title>NJU ICS Programming Assignment 代码分析 - NEXUS-AM</title><link>https://stardustdl.github.io/posts/learning/nju-icspa-analytics-nexus-am/</link><pubDate>Tue, 23 Oct 2018 17:30:22 +0800</pubDate><guid>https://stardustdl.github.io/posts/learning/nju-icspa-analytics-nexus-am/</guid><description>概述 框架代码库 CPU 架构：x64 操作系统: GNU/Linux 编译器: GCC 编程语言：C 语言 一方面, 应用程序的运行都需要运行时环境的支持; 另一方面, 只进行纯粹计算任务的程序在TRM上就可以运行, 更复杂的应用程序对运行时环境必定还有其它的需求。将这些需求收集起来，抽象成统一的API提供给程序, 这样我们就得到了一个可以支撑各种程序运行在各种机器上的库。具体地, 每个机器都按照它们的特性实现这组API; 应用程序只需要直接调用这组API即可, 无需关心自己将来运行在哪个机器上. 由于这组统一抽象的API代表了程序运行对机器的需求, 所以我们把这组API称为抽象计算机.
NEXUS-AM(Abstract machine) 把程序和机器解耦。作为一个向程序提供运行时环境的库, AM根据程序的需求把库划分成以下模块
AM = TRM + IOE + CTE + VME + MPE TRM(Turing Machine) - 图灵机, 最简单的运行时环境, 为程序提供基本的计算能力 IOE(I/O Extension) - 输入输出扩展, 为程序提供输出输入的能力 CTE(Context Extension) - 上下文扩展, 为程序提供上下文管理的能力 VME(Virtual Memory Extension) - 虚存扩展, 为程序提供虚存管理的能力 MPE(Multi-Processor Extension) - 多处理器扩展, 为程序提供多处理器通信的能力 框架代码结构 nanos-lite/ navy-apps/ nemu/ nexus-am/ # NEXUS-AM 项目 am/ # AM 相关 arch/ # 不同机器的 AM 实现 native/ x86-nemu/ build/ # AM 构建输出文件夹 apps/ # 直接运行在AM上的应用 hello/ # Hello World 程序 dhrystone/ # 性能测试程序 1 coremark/ # 性能测试程序 2 microbench/ # 性能测试程序 3 slider/ # 幻灯片播放程序 typing/ # 打字小游戏 litenes/ # 超级玛丽 libs/ # 可以直接运行在AM上的库 compiler-rt/ fixmath/ imgui/ klib/ # kernel library, 提供一些兼容 libc 的基础功能 tests/ # 直接运行在AM上的测试 cputest/ # CPU 实现测试（指令译码与执行） timetest/ # 时钟设备测试 keytest/ # 键盘设备测试 videotest/ # VGA 设备测试 .</description></item><item><title>NJU ICS Programming Assignment 代码分析 - NEMU</title><link>https://stardustdl.github.io/posts/learning/nju-icspa-analytics-nemu/</link><pubDate>Fri, 05 Oct 2018 19:30:22 +0800</pubDate><guid>https://stardustdl.github.io/posts/learning/nju-icspa-analytics-nemu/</guid><description>概述 框架代码库 CPU 架构：x64 操作系统: GNU/Linux 编译器: GCC 编程语言：C 语言 由于 NJU ICS PA 框架代码较多且缺少足够说明，讲义多为基础引入内容，为方便后续程序编写，根据实际作业过程中的理解整理出此文。 本文主要包含对 NJU ICS 课程编程作业的框架代码中 NEMU 部分的理解和分析，跟随课程及讲义进度更新，以个人使用为主，可能存在错误。
部分内容框架代码并不包含（如扩展的 Debug 宏），均为我为编码而添加的内容。采用 a_b 方式命名的多为原内容，采用 aB 方式命名的多为补充内容。由于此项目是 NJU ICS PA 的一部分，其中会包含与相关项目的互操作内容。
NEMU (NJU EMUlator) 是在 Linux 上的一个 n86（x86 子集）模拟器，模拟了基本计算机系统的功能（内存，CPU等）。包含了：
内存 CPU，寄存器 调试器（监视器） 框架代码结构 nanos-lite/ navy-apps/ nexus-am/ nemu/ # NEMU 项目 build/ # 构建输出文件夹 nemu # NEMU 主程序（可执行文件） include/ # 头文件 src/ # 源码文件 tools/ # 工具文件 runall.</description></item></channel></rss>