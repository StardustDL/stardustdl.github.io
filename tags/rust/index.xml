<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Rust on StardustDL's Blog</title><link>https://stardustdl.github.io/tags/rust/</link><description>Recent content in Rust on StardustDL's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 06 Jul 2021 17:50:46 +0800</lastBuildDate><atom:link href="https://stardustdl.github.io/tags/rust/index.xml" rel="self" type="application/rss+xml"/><item><title>Rust 集合</title><link>https://stardustdl.github.io/posts/learning/rust-collections/</link><pubDate>Tue, 06 Jul 2021 17:50:46 +0800</pubDate><guid>https://stardustdl.github.io/posts/learning/rust-collections/</guid><description>变长列表 // 创建 letv: Vec&amp;lt;i32&amp;gt;=Vec::new();letv=vec![1,2,3];// 修改 letmutv=Vec::new();v.push(5);// 访问 letthird: &amp;amp;i32 =&amp;amp;v[2];println!(&amp;#34;The third element is {}&amp;#34;,third);matchv.get(2){Some(third)=&amp;gt;println!(&amp;#34;The third element is {}&amp;#34;,third),None=&amp;gt;println!(&amp;#34;There is no third element.&amp;#34;),}// 遍历 letv=vec![100,32,57];foriin&amp;amp;v{println!(&amp;#34;{}&amp;#34;,i);}letmutv=vec![100,32,57];foriin&amp;amp;mutv{*i+=50;}在有引用的情况下无法对列表进行修改。
UTF-8 字符串 // 创建 letmuts=String::new();// 更新 letmuts=String::from(&amp;#34;foo&amp;#34;);s.push_str(&amp;#34;bar&amp;#34;);s.push(&amp;#39;l&amp;#39;);// 合并 lets1=String::from(&amp;#34;Hello, &amp;#34;);lets2=String::from(&amp;#34;world!&amp;#34;);lets3=s1+&amp;amp;s2;// note s1 has been moved here and can no longer be used // 格式化 lets1=String::from(&amp;#34;tic&amp;#34;);lets2=String::from(&amp;#34;tac&amp;#34;);lets3=String::from(&amp;#34;toe&amp;#34;);lets=format!(&amp;#34;{}-{}-{}&amp;#34;,s1,s2,s3);// do not take onwership 字符串内部对 Vec&amp;lt;u8&amp;gt; 进行包装。不支持直接索引。
切片 lethello=&amp;#34;Здравствуйте&amp;#34;;// each of these characters was 2 bytes lets=&amp;amp;hello[0..4];// s == Зд lets=&amp;amp;hello[0.</description></item><item><title>Rust 模块与项目</title><link>https://stardustdl.github.io/posts/learning/rust-modules/</link><pubDate>Tue, 06 Jul 2021 16:50:46 +0800</pubDate><guid>https://stardustdl.github.io/posts/learning/rust-modules/</guid><description>包 Packages 一个 Cargo 特性支持构建，测试，和分享 Crates。包含了 Cargo.toml 来描述如何构建 Crates。包至少包含0或1个库Crate，可以包含任意多的二进制Crate，但至少要有一个Crate。
src/ main.rs 二进制Crate的根（名称为包名） lib.rs 库Crate的根（名称为包名） bin/ 更多二进制Crate（其中的每个文件为一个Crate） 构建配置 # https://doc.rust-lang.org/cargo/reference/profiles.html [profile.dev] opt-level = 0 [profile.release] opt-level = 3 共享相同依赖开发多个包：Cargo Workspaces。
文档注释 /// Adds one to the number given. /// /// # Examples /// /// ``` /// let arg = 5; /// let answer = my_crate::add_one(arg); /// /// assert_eq!(6, answer); /// ``` /// # Panics / Errors / Safety pubfn add_one(x: i32)-&amp;gt; i32 {x+1}使用 cargo doc --open 启动文档预览，使用 cargo test 进行文档测试。</description></item><item><title>Rust 所有权特性</title><link>https://stardustdl.github.io/posts/learning/rust-onwership/</link><pubDate>Tue, 06 Jul 2021 11:50:46 +0800</pubDate><guid>https://stardustdl.github.io/posts/learning/rust-onwership/</guid><description>规则 每个值都有一个称为其所有者的变量 同一时刻只能有一个所有者 当所有者离开作用域时，值被舍弃（调用 drop 函数） 变量与数据的交互 移动语义 Rust 从不自动进行变量的深层复制，而是使用移动语义。
lets1=String::from(&amp;#34;abc&amp;#34;);lets2=s1;// s1 is invalid 克隆语义 使用 clone 函数实现明确的深层复制。
lets1=String::from(&amp;#34;hello&amp;#34;);lets2=s1.clone();复制语义 诸如整数等类型数据，具有编译时已知的大小，并完全存储在栈上，能够快速复制，浅层复制与深层复制没有实际区别，不需要使用 clone 函数（实现 Copy 特征以标记这类数据）。
letx=5;lety=x;引用 lets1: String =String::from(&amp;#34;hello&amp;#34;);letref_s1: &amp;amp;String =&amp;amp;s1;letmutmut_s1: String =String::from(&amp;#34;hello&amp;#34;);letref_s1: &amp;amp;mutString=&amp;amp;mutmut_s1;&amp;amp; 表示引用变量，不取得变量的所有权，默认以不可变方式进行引用，&amp;amp;mut 表示可变方式引用。 传入引用变量的函数，称为借用了这个变量。
在同一作用域下，对同一个对象的引用，只允许以下组合方式：
一个或多个不可变引用 一个可变引用，没有不可变引用 切片 切片指对一个序列中的一段连续元素的引用，不取得变量的所有权。
leta=[1,2,3,4,5];letslice=&amp;amp;a[1..3];assert_eq!(slice,&amp;amp;[2,3]);字符串切片 lets=String::from(&amp;#34;hello world&amp;#34;);lethello: &amp;amp;str =&amp;amp;s[0..5];letworld: &amp;amp;str =&amp;amp;s[6..11];letslice: &amp;amp;str =&amp;amp;s[..2];letslice: &amp;amp;str =&amp;amp;s[3..];letslice: &amp;amp;str =&amp;amp;s[..];字符串字面值的类型为字符串切片（&amp;amp;str）。</description></item><item><title>Rust 语言基础使用</title><link>https://stardustdl.github.io/posts/learning/rust-startup/</link><pubDate>Tue, 06 Jul 2021 09:42:46 +0800</pubDate><guid>https://stardustdl.github.io/posts/learning/rust-startup/</guid><description>安装 https://www.rust-lang.org/tools/install
安装管理器 rustup 编译器 rustc 构建系统与包管理器 cargo 常用命令 创建项目 cargo new {name} 可编译检查 cargo check 编译 cargo build (--release) 运行 cargo run 更新依赖包小版本 cargo upgrade （大版本需要手动修改） 变量 letimmutable_var: i32 =5;letmutmutable_var: i32 =5;constCONST: u32 =100_000;数值字面值
十进制 98_222 十六进制 0xff 八进制 0o77 二进制 0b1111_0000 字节 b'A' 类型 数值类型 i8, i16, i32, i64, i128, isize, u8, u16, u32, u64, u128, usize, f32, f64 布尔类型 bool 字符类型 char 四字节 元组类型 (T1, T2, .</description></item></channel></rss>