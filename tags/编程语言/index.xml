<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>编程语言 on StardustDL's Blog</title><link>https://stardustdl.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/</link><description>Recent content in 编程语言 on StardustDL's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 06 Jul 2021 11:50:46 +0800</lastBuildDate><atom:link href="https://stardustdl.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/index.xml" rel="self" type="application/rss+xml"/><item><title>Rust 所有权特性</title><link>https://stardustdl.github.io/posts/learning/rust-onwership/</link><pubDate>Tue, 06 Jul 2021 11:50:46 +0800</pubDate><guid>https://stardustdl.github.io/posts/learning/rust-onwership/</guid><description>规则 每个值都有一个称为其所有者的变量 同一时刻只能有一个所有者 当所有者离开作用域时，值被舍弃（调用 drop 函数） 变量与数据的交互 移动语义 Rust 从不自动进行变量的深层复制，而是使用移动语义。
lets1=String::from(&amp;#34;abc&amp;#34;);lets2=s1;// s1 is invalid 克隆语义 使用 clone 函数实现明确的深层复制。
lets1=String::from(&amp;#34;hello&amp;#34;);lets2=s1.clone();复制语义 诸如整数等类型数据，具有编译时已知的大小，并完全存储在栈上，能够快速复制，浅层复制与深层复制没有实际区别，不需要使用 clone 函数（实现 Copy 特征以标记这类数据）。
letx=5;lety=x;引用 lets1: String =String::from(&amp;#34;hello&amp;#34;);letref_s1: &amp;amp;String =&amp;amp;s1;letmutmut_s1: String =String::from(&amp;#34;hello&amp;#34;);letref_s1: &amp;amp;mutString=&amp;amp;mutmut_s1;&amp;amp; 表示引用变量，不取得变量的所有权，默认以不可变方式进行引用，&amp;amp;mut 表示可变方式引用。 传入引用变量的函数，称为借用了这个变量。
在同一作用域下，对同一个对象的引用，只允许以下组合方式：
一个或多个不可变引用 一个可变引用，没有不可变引用 切片 切片指对一个序列中的一段连续元素的引用，不取得变量的所有权。
leta=[1,2,3,4,5];letslice=&amp;amp;a[1..3];assert_eq!(slice,&amp;amp;[2,3]);字符串切片 lets=String::from(&amp;#34;hello world&amp;#34;);lethello: &amp;amp;str =&amp;amp;s[0..5];letworld: &amp;amp;str =&amp;amp;s[6..11];letslice: &amp;amp;str =&amp;amp;s[..2];letslice: &amp;amp;str =&amp;amp;s[3..];letslice: &amp;amp;str =&amp;amp;s[..];字符串字面值的类型为字符串切片（&amp;amp;str）。</description></item><item><title>Rust 语言基础使用</title><link>https://stardustdl.github.io/posts/learning/rust-startup/</link><pubDate>Tue, 06 Jul 2021 09:42:46 +0800</pubDate><guid>https://stardustdl.github.io/posts/learning/rust-startup/</guid><description>安装 https://www.rust-lang.org/tools/install
安装管理器 rustup 编译器 rustc 构建系统与包管理器 cargo 常用命令 创建项目 cargo new {name} 可编译检查 cargo check 编译 cargo build (--release) 运行 cargo run 变量 letimmutable_var: i32 =5;letmutmutable_var: i32 =5;constCONST: u32 =100_000;数值字面值
十进制 98_222 十六进制 0xff 八进制 0o77 二进制 0b1111_0000 字节 b'A' 类型 数值类型 i8, i16, i32, i64, i128, isize, u8, u16, u32, u64, u128, usize, f32, f64 布尔类型 bool 字符类型 char 四字节 元组类型 (T1, T2, .</description></item><item><title>C++ 模板实现编译期计算数列</title><link>https://stardustdl.github.io/posts/learning/cpp-template-seq/</link><pubDate>Thu, 23 Jul 2020 13:23:31 +0800</pubDate><guid>https://stardustdl.github.io/posts/learning/cpp-template-seq/</guid><description>虽然 C++ 模板最初被 Bjarne Stroustrup 称为参数化类型，但是实际上其工作方式更像一个受限制的高级版宏，”模板“这个名称更加合适。
这里使用 C++ 模板的非类型参数特性来实现一些数列的编译期计算。
阶乘数列 $$ F_i = \begin{cases} 1 &amp;amp; i = 0 \\ iF_{i-1} &amp;amp; i &amp;gt; 0 \end{cases} $$
template &amp;lt;int num&amp;gt; class Factorial { public: static const int value = num * Factorial&amp;lt;num - 1&amp;gt;::value; }; template &amp;lt;&amp;gt; class Factorial&amp;lt;0&amp;gt; { public: static const int value = 1; }; int main() { cout &amp;lt;&amp;lt; Factorial&amp;lt;10&amp;gt;::value &amp;lt;&amp;lt; endl; } 为什么这是编译期运算呢？可以从两个方面了解。
关闭编译器所有优化。
g++ -S fac.</description></item><item><title>Dockerfile</title><link>https://stardustdl.github.io/posts/tools/proglang-dockerfile/</link><pubDate>Mon, 12 Nov 2018 19:37:36 +0800</pubDate><guid>https://stardustdl.github.io/posts/tools/proglang-dockerfile/</guid><description>基本信息 Dockerfile 为 Docker 提供镜像构建命令及描述。 Docker 书写思想： 自动化，无交互 顺序相关 清理 易读 基础语法 // 注释 INSTRUCTION arguments 指令格式，一般指令名大写 指令 FROM 指定基础镜像，必须是第一句有效指令。
FROM&amp;lt;imagesName:tag&amp;gt;多个 FROM 指令使用最后一个。
MAINTAINER 设置维护者信息。
MAINTAINERName &amp;lt;Email&amp;gt;RUN 运行指定命令。
shell 格式 RUN echo HelloWorld exec 格式（不启动 shell） RUN [&amp;#34;prog&amp;#34;, &amp;#34;arg1&amp;#34;, &amp;#34;arg2&amp;#34;]ENV 设置镜像的环境变量。
ENV &amp;lt;key&amp;gt; &amp;lt;value&amp;gt;COPY 将本地文件或文件夹复制到镜像指定路径下。
COPY /local/path/file /images/path/fileADD 可从本地或网上获取，存储到镜像指定路径下，也可对文件自动解包。
ADD file /images/path/fileADD latest.tar.gz /var/www/ 相同复制命令下，ADD 构建的镜像比 COPY 构建的镜像大 不能对构建目录或上下文之外的文件进行 ADD 操作：不能使用 .</description></item><item><title>YAML Ain't Markup Language</title><link>https://stardustdl.github.io/posts/tools/proglang-yaml/</link><pubDate>Mon, 12 Nov 2018 10:20:00 +0800</pubDate><guid>https://stardustdl.github.io/posts/tools/proglang-yaml/</guid><description>基本信息 官网 介绍：YAML 是一种数据序列化语言，旨在对人类友好，并与现代编程语言配合使用，以执行常见的日常任务。 优点 YAML的可读性好。 YAML和脚本语言的交互性好。 YAML使用实现语言的数据类型。 YAML有一个一致的信息模型。 YAML易于实现。 语法 基础语法 大小写敏感 使用缩进表示层级关系 缩进时不允许使用 Tab 键，只允许使用空格。 缩进的空格数目不重要，只要相同层级的元素左侧对齐即可 # 表示注释，从这个字符一直到行尾，都会被解析器忽略。 基础结构 对象 对象，键值对的集合，又称为映射（mapping）/ 哈希（hashes） / 字典（dictionary）。使用冒号结构表示。也可将所有键值对写成一个行内对象。
animal:petshash:{name: Steve, foo:bar } 数组 数组，一组按次序排列的值，又称为序列（sequence） / 列表（list）。
- Cat- Dog- Goldfishanimal:[Cat, Dog]纯量 纯量是最基本的、不可再分的值。支持的类型有：
布尔值：true false 整数，浮点数：字面量 12.30 Null：~ 时间：ISO8601 格式 2001-12-14t21:59:43.10-05:00 日期：复合 iso8601 格式的年、月、日表示 1976-07-31 使用两个感叹号，可强制转换类型。
e:!!str123f:!!strtrue字符串 默认不使用引号表示 如果字符串之中包含空格或特殊字符，需要放在引号之中 单引号和双引号都可以使用，双引号不会对特殊字符转义 单引号之中如果还有单引号，必须连续使用两个单引号转义 字符串可以写成多行，从第二行开始，必须有一个单空格缩进。换行符会被转为空格 多行字符串可以使用 | 保留换行符，也可以使用 &amp;gt; 折叠换行 + 表示保留文字块末尾的换行，- 表示删除字符串末尾的换行。 str:这是一行字符串s1:&amp;#39;内容\n字符串&amp;#39;s2:&amp;#34;内容\n字符串&amp;#34;str:&amp;#39;labor&amp;#39;&amp;#39;s day&amp;#39;str:这是一段多行字符串this:|Foo Barthat:&amp;gt;Foo Bar s1:|Foos2:|+Foos3:|-Foo引用 &amp;amp; 建立锚点 &amp;lt;&amp;lt; 合并到当前数据 * 引用锚点 defaults:&amp;amp;defaultsadapter:postgreshost:localhostdevelopment:database:myapp_development&amp;lt;&amp;lt;:*defaultstest:database:myapp_test&amp;lt;&amp;lt;:*defaults# 等价于defaults:adapter:postgreshost:localhostdevelopment:database:myapp_developmentadapter:postgreshost:localhosttest:database:myapp_testadapter:postgreshost:localhost参考资料 YAML Version 1.</description></item><item><title>Makefile</title><link>https://stardustdl.github.io/posts/tools/proglang-makefile/</link><pubDate>Sun, 16 Sep 2018 10:20:00 +0800</pubDate><guid>https://stardustdl.github.io/posts/tools/proglang-makefile/</guid><description>基本信息 Makefile 为 make 提供依赖描述和编译指令等设置。 基础知识 注释 # 转义 \ 通配符：* ? ~ 显式规则 Makefile 规则：指定依赖关系与生成命令。
target ... : prerequisites ... command ... ... targets : prerequisites ; command command ... target 可以是一个object file（目标文件），也可以是一个执行文件，还可以是一个标签。可以使用通配符。 prerequisites 生成该target所依赖的文件和/或target command 该target要执行的命令（任意的shell命令），如果其不与“target:prerequisites”在一行，那么，必须以 Tab 键开头，如 果和prerequisites在一行，那么可以用分号做为分隔。 prerequisites中如果有一个以上的文件比target文件要新的话，command所定义的命令就会被执行。
还可以通过这种方式表达依赖关系，多个目标依赖一个文件：
kbd.o command.o files.o : command.h display.o insert.o search.o files.o : buffer.h Make 将第一个目标作为最终目标 没有依赖项的目标一般不会被自动执行（除非是第一个），需要向 make 传递参数来执行特定目标 可以使用 \ 折行 多目标 有可能我们的多个目标同时依赖于一个文件，并且 其生成的命令大体类似。可以使用自动化变量 $@。</description></item><item><title>Verilog HDL</title><link>https://stardustdl.github.io/posts/tools/proglang-verilog/</link><pubDate>Wed, 12 Sep 2018 17:50:16 +0800</pubDate><guid>https://stardustdl.github.io/posts/tools/proglang-verilog/</guid><description>基本信息 介绍：Verilog HDL是一种硬件描述语言，用于从算法级、门级到开关级的多种抽象设计层次的 数字系统建模。被建模的数字系统对象的复杂性可以介于简单的门和完整的电子数字系统之 间。数字系统能够按层次描述，并可在相同描述中显式地进行时序建模。 基础知识 注释 // one-line comment /* multi-line comment */ 标识符 Verilog HDL中的标识符可以是任意一组字母、数字、$ 符号和 _ （下划线）符号的 组合，但标识符的第一个字符必须是字母或者下划线。另外，标识符是区分大小写的。 转义标识符可以在一条标识符中包含任何可打印字符。转义标识符以 \ （反斜线）符号开头，以空白结尾（空白可以是一个空格、一个制表字符或换行符）。反斜线和结束空格并不是转义标识符的一部分。转义标识符与关键词并不完全相同。标识符 \initial 与标识符 initial（这是个关键词）不同。
值 基本值 0 ：逻辑 0 1 ：逻辑 1 x ：位置 z ：高阻 常量 整型 简单十进制表示 12,-15
基数表示法 [size] 'base value
size 定义以位计的常量的位长 base ：进制（o/O,b/B,d/D,h/H） x（或z）在十六进制值中代表4位x（或z），在八进制中代表3位x（或z），在二进制中代表1位x（或z）。 基数格式计数形式的数通常为无符号数。这种形式的整型数的长度定义是可选的。如果没有定义一个整数型的长度，数的长度为相应值中定义的位数。 如果定义的长度比为常量指定的长度长，通常在左边填0补位。但是如果数最左边一位为 x或z，就相应地用x或z在左边补位。 如果长度定义得更小，那么最左边的位相应地被截断。 ？字符在数中可以代替值z在值z被解释为不分大小写的情况下提高可读性。
实数 十进制计数法 2.0 0.1 科学计数法 23_5.1e2 5E-4 实数通过四舍五入被转换为最相近的整数。</description></item><item><title>Cascading Style Sheets</title><link>https://stardustdl.github.io/posts/tools/proglang-css/</link><pubDate>Sat, 08 Sep 2018 10:30:40 +0800</pubDate><guid>https://stardustdl.github.io/posts/tools/proglang-css/</guid><description>基本信息 介绍：CSS 存储 HTML 样式，定义如何显示 HTML 元素。 在 HTML 中使用样式表，参见 {% post_link tool/progLang-HTML %} 层叠 样式表允许以多种方式规定样式信息。样式可以规定在单个的 HTML 元素中，在 HTML 页的头元素中，或在一个外部的 CSS 文件中。甚至可以在同一个 HTML 文档内部引用多个外部样式表。 当同一个 HTML 元素被不止一个样式定义时，层叠顺序如下，其中数字 4 拥有最高的优先权。
浏览器缺省设置 外部样式表 内部样式表（位于 标签内部） 内联样式（在 HTML 元素内部） 因此，内联样式（在 HTML 元素内部）拥有最高的优先权，这意味着它将优先于以下的样式声明： 标签中的样式声明，外部样式表中的样式声明，或者浏览器中的样式声明（缺省值）。
通过 CSS 继承，子元素将继承最高级元素所拥有的属性
语法 CSS 规则由两个主要的部分构成：选择器，以及一条或多条声明。
selector {declaration1; declaration2; ... declarationN } selector {property: value} h1 {color:red; font-size:14px;} 选择器：指定需要改变样式的 HTML 元素。 每条声明由一个属性和一个值组成。 如果要定义不止一个声明，则需要用分号将每个声明分开。 属性（property）是设置的样式属性（style attribute）。每个属性有一个值。 属性和值被冒号分开。 如果值为若干单词，则要给值加引号。 CSS 对大小写不敏感。不过存在一个例外：如果涉及到与 HTML 文档一起工作的话，class 和 id 名称对大小写是敏感的。</description></item><item><title>Hyper Text Markup Language</title><link>https://stardustdl.github.io/posts/tools/proglang-html/</link><pubDate>Thu, 06 Sep 2018 14:16:00 +0800</pubDate><guid>https://stardustdl.github.io/posts/tools/proglang-html/</guid><description>基本信息 介绍：一种描述网页的标记语言。 相关：XHTML（可扩展超文本标记语言，更严格更纯净的 HTML 版本） 语法 HTML 文档描述网页 HTML 文档包含 HTML 标签和纯文本 HTML 标记标签通常被称为 HTML 标签。 HTML 标签是由尖括号包围的关键词，比如 &amp;lt;html&amp;gt; HTML 标签通常是成对出现的，比如 &amp;lt;b&amp;gt; 和 &amp;lt;/b&amp;gt; 标签对中的第一个标签是开始标签，第二个标签是结束标签 开始和结束标签也被称为开放标签和闭合标签 HTML 元素指的是从开始标签（start tag）到结束标签（end tag）的所有代码。 HTML 元素以开始标签起始 HTML 元素以结束标签终止 元素的内容是开始标签与结束标签之间的内容 某些 HTML 元素具有空内容（empty content） 空元素在开始标签中进行关闭（以开始标签的结束而结束） 大多数 HTML 元素可拥有属性 HTML 标签可以拥有属性。属性提供了有关 HTML 元素的更多的信息。 属性总是以名称/值对的形式出现，比如：name=&amp;quot;value&amp;quot;。 属性总是在 HTML 元素的开始标签中规定。 HTML 块元素：块级元素在浏览器显示时，通常会以新行来开始（和结束）。 HTML 内联元素：内联元素在显示时通常不会以新行开始。 颜色：#000000 = rgb(0,0,0) &amp;lt;!</description></item><item><title>Structured Query Language</title><link>https://stardustdl.github.io/posts/tools/proglang-sql/</link><pubDate>Mon, 03 Sep 2018 18:51:10 +0800</pubDate><guid>https://stardustdl.github.io/posts/tools/proglang-sql/</guid><description>基本信息 介绍：结构化查询语言，用于存取数据以及查询、更新和管理关系数据库系统。存在着很多不同版本的 SQL 语言，但是为了与 ANSI 标准相兼容，它们必须以相似的方式共同地来支持一些主要的关键词。但许多相似语义的内容其具体写法可能会有不同。 SQL 对大小写不敏感。 SQL 使用单引号来环绕文本值（大部分数据库系统也接受双引号）。 使用 SQL 需先了解具体数据库的描述方法。
数据操作语言 SELECT SELECT 语句用于从表中选取数据。
SELECTcolumnFROMtable_name 从名为 &amp;ldquo;Persons&amp;rdquo; 的数据库表，获取名为 &amp;ldquo;LastName&amp;rdquo; 和 &amp;ldquo;FirstName&amp;rdquo; 的列的内容 SELECTLastName,FirstNameFROMPersons 从 &amp;ldquo;Persons&amp;rdquo; 表中选取所有的列。 SELECT*FROMPersonsDISTINCT 关键词 DISTINCT 用于返回唯一不同的值。
从 Company&amp;quot; 列中仅选取唯一不同的值 SELECTDISTINCTCompanyFROMOrdersWHERE 如需有条件地从表中选取数据，可将 WHERE 子句添加到 SELECT 语句。
选取居住在城市 &amp;ldquo;Beijing&amp;rdquo; 中的人 SELECT*FROMPersonsWHERECity=&amp;#39;Beijing&amp;#39;可用运算符：
操作符 描述 = 等于 &amp;lt;&amp;gt; 不等于 &amp;gt; 大于 &amp;lt; 小于 &amp;gt;= 大于等于 &amp;lt;= 小于等于 BETWEEN 在某个范围内 IN 规定多个可能取值 LIKE 搜索某种模式 AND 合取两个条件 OR 析取两个条件 NOT 条件取反 SELECT*FROMPersonsWHERE(FirstName=&amp;#39;Thomas&amp;#39;ORFirstName=&amp;#39;William&amp;#39;)ANDLastName=&amp;#39;Carter&amp;#39;LIKE LIKE 操作符用于在 WHERE 子句中搜索列中的指定模式。</description></item><item><title>PHP Hypertext Preprocessor</title><link>https://stardustdl.github.io/posts/tools/proglang-php/</link><pubDate>Mon, 03 Sep 2018 10:20:00 +0800</pubDate><guid>https://stardustdl.github.io/posts/tools/proglang-php/</guid><description>基本信息 官网 介绍：PHP 是一种创建动态交互性站点的强有力的服务器端脚本语言。PHP 脚本在服务器上执行，然后向浏览器发送回纯 HTML 结果。 安装：使用支持 PHP 的 Web 主机，安装 PHP 和 MySQL 语法 PHP 脚本可放置于文档中的任何位置。 PHP 脚本以 &amp;lt;?php 开头，以 ?&amp;gt; 结尾： PHP 文件的默认文件扩展名是 &amp;ldquo;.php&amp;rdquo;。 PHP 文件通常包含 HTML 标签以及一些 PHP 脚本代码。 语句以分号结尾（;） 注释 // one-line # one-line /* multi-line */ 所有用户定义的函数、类和关键词（例如 if、else、echo 等等）都对大小写不敏感。所有变量都对大小写敏感。 变量 变量规则： 变量以 $ 符号开头，其后是变量的名称 变量名称必须以字母或下划线开头 变量名称不能以数字开头 变量名称只能包含字母数字字符和下划线（A-z、0-9 以及 _） 变量名称对大小写敏感（$y 与 $Y 是两个不同的变量） 变量会在首次为其赋值时被创建 作用域 函数之外声明的变量拥有 global 作用域，只能在函数以外进行访问。 函数内部声明的变量拥有 local 作用域，只能在函数内部进行访问。 static 关键词用于声明静态局部变量。 global 关键词用于访问函数内的全局变量。 PHP 同时在名为 $GLOBALS[index] 的数组中存储了所有的全局变量。下标存有变量名。这个数组在函数内也可以访问，并能够用于直接更新全局变量。 $x=5; $y=10; function myTest() { global $x,$y; $y=$x+$y; } myTest(); echo $y; // 输出 15 输出 echo 能够输出一个以上的字符串，无返回值。有无括号均可使用：echo 或 echo()。 print 只能输出一个字符串，并始终返回 1。有无括号均可使用：print 或 print()。 字符串中加入对变量，数组某位置的引用：</description></item><item><title>eXtensible Markup Language</title><link>https://stardustdl.github.io/posts/tools/proglang-xml/</link><pubDate>Sun, 02 Sep 2018 18:16:01 +0800</pubDate><guid>https://stardustdl.github.io/posts/tools/proglang-xml/</guid><description>基本信息 介绍：XML 被设计用来传输和存储数据，具有自我描述性。 语法 XML 文档形成一种树结构。
所有元素都须有关闭标签。 标签对大小写敏感 必须正确地嵌套 必须包含根元素 属性值须加引号 空格会被保留 &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;ISO-8859-1&amp;#34;?&amp;gt; &amp;lt;root name=&amp;#34;_root&amp;#34;&amp;gt; &amp;lt;child&amp;gt; &amp;lt;subchild&amp;gt;.....&amp;lt;/subchild&amp;gt; &amp;lt;/child&amp;gt; &amp;lt;/root&amp;gt; 元数据（有关数据的数据）应当存储为属性，而数据本身应当存储为元素。
特殊字符 原字符 转义 &amp;lt; &amp;amp;lt; &amp;gt; &amp;amp;ge; &amp;amp; &amp;amp;amp; ' &amp;amp;apos; &amp;quot; &amp;amp;quot; 注释 &amp;lt;!-- comment --&amp;gt; 元素命名 名称可以含字母、数字以及其他的字符 名称不能以数字或者标点符号开始 名称不能以字符 “xml”（或者 XML、Xml）开始 名称不能包含空格 命名空间 定义 XML 命名空间属性被放置于元素的开始标签之中，并使用以下的语法：</description></item></channel></rss>