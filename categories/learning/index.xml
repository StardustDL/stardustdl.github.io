<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Learning on StardustDL's Blog</title><link>https://stardustdl.github.io/categories/learning/</link><description>Recent content in Learning on StardustDL's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 23 Jul 2020 13:23:31 +0800</lastBuildDate><atom:link href="https://stardustdl.github.io/categories/learning/index.xml" rel="self" type="application/rss+xml"/><item><title>C++ 模板实现编译期计算数列</title><link>https://stardustdl.github.io/posts/learning/cpp-template-seq/</link><pubDate>Thu, 23 Jul 2020 13:23:31 +0800</pubDate><guid>https://stardustdl.github.io/posts/learning/cpp-template-seq/</guid><description>虽然 C++ 模板最初被 Bjarne Stroustrup 称为参数化类型，但是实际上其工作方式更像一个受限制的高级版宏，”模板“这个名称更加合适。
这里使用 C++ 模板的非类型参数特性来实现一些数列的编译期计算。
阶乘数列 $$ F_i = \begin{cases} 1 &amp;amp; i = 0\
iF_{i-1} &amp;amp; i &amp;gt; 0 \end{cases} $$
template &amp;lt;int num&amp;gt; class Factorial { public: static const int value = num * Factorial&amp;lt;num - 1&amp;gt;::value; }; template &amp;lt;&amp;gt; class Factorial&amp;lt;0&amp;gt; { public: static const int value = 1; }; int main() { cout &amp;lt;&amp;lt; Factorial&amp;lt;10&amp;gt;::value &amp;lt;&amp;lt; endl; } 为什么这是编译期运算呢？可以从两个方面了解。
关闭编译器所有优化。
g++ -S fac.</description></item><item><title>Learning</title><link>https://stardustdl.github.io/posts/learning/</link><pubDate>Thu, 23 Jul 2020 13:23:31 +0800</pubDate><guid>https://stardustdl.github.io/posts/learning/</guid><description/></item><item><title>NJU ICS Programming Assignment 代码分析 - NANOS-LITE</title><link>https://stardustdl.github.io/posts/learning/nju-icspa-analytics-nanos-lite/</link><pubDate>Mon, 05 Nov 2018 17:30:22 +0800</pubDate><guid>https://stardustdl.github.io/posts/learning/nju-icspa-analytics-nanos-lite/</guid><description>概述 框架代码库 CPU 架构：x64 操作系统: GNU/Linux 编译器: GCC 编程语言：C 语言 Nanos-lite是南京大学操作系统Nanos的裁剪版。可运行在 x86-nemu 的 AM 上。
框架代码结构 nanos-lite/ # NANOS-LITE 项目 include/ # 头文件 src/ # 源文件 device.c # 设备抽象 fs.c # 文件系统 files.h # ramdisk 中的文件描述 initrd.S # ramdisk设备 irq.c # 中断异常处理 loader.c # 加载器 main.c # 主程序 mm.c # 存储管理 proc.c # 进程调度 ramdisk.c # ramdisk驱动程序 syscall.c # 系统调用处理 syscall.h # 系统调用相关宏 Makefile navy-apps/ nemu/ nexus-am/ include/ common.</description></item><item><title>NJU ICS Programming Assignment 代码分析 - NAVY-APPS</title><link>https://stardustdl.github.io/posts/learning/nju-icspa-analytics-navy-apps/</link><pubDate>Mon, 05 Nov 2018 17:30:22 +0800</pubDate><guid>https://stardustdl.github.io/posts/learning/nju-icspa-analytics-navy-apps/</guid><description>概述 框架代码库 CPU 架构：x64 操作系统: GNU/Linux 编译器: GCC 编程语言：C 语言 Navy-Apps 提供一系列运行在 Nanos-lite 上的用户程序，也包含了 Newlib 库。
框架代码结构 nanos-lite/ navy-apps/ apps/ # 用户程序 am-apps/ Makefile init/ litenes/ lua/ nterm/ nwm/ pal/ # 仙剑奇侠传 slider/ fsimg/ # 根文件系统 libs/ # 库 libc/ # Newlib C库 libos/ # 系统调用的用户层封装 syscall.h # 系统调用类型 tests/ # 一些测试 nemu/ nexus-am/ libs/libos/syscall.h 与 nanos-lite/syscall.h 相同。 libs/ libc/ Newlib 项目, 它是一个专门为嵌入式系统提供的 C 库, 库中的函数对运行时环境的要求极低. 这对Nanos-lite来说是非常友好的, 我们不需要为了配合C库而在Nanos-lite中实现额外的功能.</description></item><item><title>64位有符号数乘法取模问题</title><link>https://stardustdl.github.io/posts/learning/multimod-64bit-method/</link><pubDate>Thu, 25 Oct 2018 17:30:22 +0800</pubDate><guid>https://stardustdl.github.io/posts/learning/multimod-64bit-method/</guid><description>问题引入 给定 $64$ 位有符号整数 $a,b,m$ （类型为 int64_t），希望求出 $a\times b \bmod m$ 的数值。
int64_t multimod(int64_t a, int64_t b, int64_t m); 给出一个尽可能高效的正确 multimod 实现。使得它对于任意在 $[0,2^{63}-1]$ 范围内的 $a,b,m$ 均能正确求出 $a\times b \bmod m$ 的数值，且在任何时候不触发有符号整数溢出。
解决方法 运行环境 Windows 10 （64 位） 上 Hyper-V 平台，Debian 9 虚拟机 （64 位）
CPU 型号：Intel(R) Core(TM) i7-7700HQ CPU 主频：2.80 GHz 基础设施 为使实验顺利，实验前先准备了测试程序和时间测量程序。
测试程序 使用 Python 自动生成测试用例，运行程序，检查输出。
import os import random import sys def getNum(): return random.randint(0,2**63-1) if __name__==&amp;#34;__main__&amp;#34;: cnt = 10**4; passed = 0 failed = 0 if len(sys.</description></item><item><title>NJU ICS Programming Assignment 代码分析 - NEXUS-AM</title><link>https://stardustdl.github.io/posts/learning/nju-icspa-analytics-nexus-am/</link><pubDate>Tue, 23 Oct 2018 17:30:22 +0800</pubDate><guid>https://stardustdl.github.io/posts/learning/nju-icspa-analytics-nexus-am/</guid><description>概述 框架代码库 CPU 架构：x64 操作系统: GNU/Linux 编译器: GCC 编程语言：C 语言 一方面, 应用程序的运行都需要运行时环境的支持; 另一方面, 只进行纯粹计算任务的程序在TRM上就可以运行, 更复杂的应用程序对运行时环境必定还有其它的需求。将这些需求收集起来，抽象成统一的API提供给程序, 这样我们就得到了一个可以支撑各种程序运行在各种机器上的库。具体地, 每个机器都按照它们的特性实现这组API; 应用程序只需要直接调用这组API即可, 无需关心自己将来运行在哪个机器上. 由于这组统一抽象的API代表了程序运行对机器的需求, 所以我们把这组API称为抽象计算机.
NEXUS-AM(Abstract machine) 把程序和机器解耦。作为一个向程序提供运行时环境的库, AM根据程序的需求把库划分成以下模块
AM = TRM + IOE + CTE + VME + MPE TRM(Turing Machine) - 图灵机, 最简单的运行时环境, 为程序提供基本的计算能力 IOE(I/O Extension) - 输入输出扩展, 为程序提供输出输入的能力 CTE(Context Extension) - 上下文扩展, 为程序提供上下文管理的能力 VME(Virtual Memory Extension) - 虚存扩展, 为程序提供虚存管理的能力 MPE(Multi-Processor Extension) - 多处理器扩展, 为程序提供多处理器通信的能力 框架代码结构 nanos-lite/ navy-apps/ nemu/ nexus-am/ # NEXUS-AM 项目 am/ # AM 相关 arch/ # 不同机器的 AM 实现 native/ x86-nemu/ build/ # AM 构建输出文件夹 apps/ # 直接运行在AM上的应用 hello/ # Hello World 程序 dhrystone/ # 性能测试程序 1 coremark/ # 性能测试程序 2 microbench/ # 性能测试程序 3 slider/ # 幻灯片播放程序 typing/ # 打字小游戏 litenes/ # 超级玛丽 libs/ # 可以直接运行在AM上的库 compiler-rt/ fixmath/ imgui/ klib/ # kernel library, 提供一些兼容 libc 的基础功能 tests/ # 直接运行在AM上的测试 cputest/ # CPU 实现测试（指令译码与执行） timetest/ # 时钟设备测试 keytest/ # 键盘设备测试 videotest/ # VGA 设备测试 .</description></item><item><title>NJU ICS Programming Assignment 代码分析 - NEMU</title><link>https://stardustdl.github.io/posts/learning/nju-icspa-analytics-nemu/</link><pubDate>Fri, 05 Oct 2018 19:30:22 +0800</pubDate><guid>https://stardustdl.github.io/posts/learning/nju-icspa-analytics-nemu/</guid><description>概述 框架代码库 CPU 架构：x64 操作系统: GNU/Linux 编译器: GCC 编程语言：C 语言 由于 NJU ICS PA 框架代码较多且缺少足够说明，讲义多为基础引入内容，为方便后续程序编写，根据实际作业过程中的理解整理出此文。 本文主要包含对 NJU ICS 课程编程作业的框架代码中 NEMU 部分的理解和分析，跟随课程及讲义进度更新，以个人使用为主，可能存在错误。
部分内容框架代码并不包含（如扩展的 Debug 宏），均为我为编码而添加的内容。采用 a_b 方式命名的多为原内容，采用 aB 方式命名的多为补充内容。由于此项目是 NJU ICS PA 的一部分，其中会包含与相关项目的互操作内容。
NEMU (NJU EMUlator) 是在 Linux 上的一个 n86（x86 子集）模拟器，模拟了基本计算机系统的功能（内存，CPU等）。包含了：
内存 CPU，寄存器 调试器（监视器） 框架代码结构 nanos-lite/ navy-apps/ nexus-am/ nemu/ # NEMU 项目 build/ # 构建输出文件夹 nemu # NEMU 主程序（可执行文件） include/ # 头文件 src/ # 源码文件 tools/ # 工具文件 runall.</description></item><item><title>OJ-oriented Problem Solving 命题报告</title><link>https://stardustdl.github.io/posts/learning/ojops-problem-design/</link><pubDate>Tue, 11 Sep 2018 17:30:22 +0800</pubDate><guid>https://stardustdl.github.io/posts/learning/ojops-problem-design/</guid><description>题面 题目概述 时间限制：1000 ms 空间限制：128 MB 命题人：Stardust D.L. 验题人：GodCallMeGod, Pexure 题目描述 小 A 和你我一样，正坐在电脑前刷题。但茫茫多的 OJ 和茫茫多的题目，让他感到无从下手。幸运的是，小 A 得到了一个神奇的工具，能很快生成一个指定长度的题目列表，还能标识出题目的难度等级。小 A 用这个工具生成了一个长度为 $n$ 的题目列表，但这个题目列表中难度安排不太令人满意，为了提高刷题体验，也尽快提高问题求解能力，小 A 决定把其中一些题换掉，来让题目难度安排更加合理。 形式化的，设题目列表 $a$，$a_i(1\le i\le n)$ 表示第 $i$ 道题的难度（数值越大，难度越高），定义 对于题目列表的“难度渐进”值 $Q(a)$ 为：
$$ Q(a)=\sum_{i=2}^n \min(1,a_i-a_{i-1}) $$
小 A 希望将 某一些 $a_i$ 改成 $a_i'$（由于可以任意挑题目，所以这里选取的 $a_i'\in \mathbb{Z}$ 是任意的，即使是负值也可以），使得修改后的新序列 $a'$，$Q(a')$ 最大。为了尽快开始做题，小 A 希望被替换的题目数量越少越好。请求出最少替换几道题目能使得 $Q(a')$ 最大。
输入 第一行一个整数 $T$，表示 $T$ 组测试数据。 之后对于每组测试数据： 第一行一个整数 $n$，表示题目列表长度。 第二行 $n$ 个整数 $a_i$，表示每道题目的难度。
输出 $T$ 行，每行一个整数表示答案。</description></item><item><title>栈与队列的相互实现</title><link>https://stardustdl.github.io/posts/learning/the-mutual-realization-of-stack-and-queue/</link><pubDate>Tue, 28 Aug 2018 17:30:22 +0800</pubDate><guid>https://stardustdl.github.io/posts/learning/the-mutual-realization-of-stack-and-queue/</guid><description>本文介绍使用栈实现队列和使用队列实现栈的方法。为使问题更加有意义，我们将尽量选择一个较优的实现方法。
问题引入 栈：先进后出的线性结构，仅允许对栈顶进行添加（push），删除（pop），访问（peek）操作，空间复杂度线性，单次操作时间复杂度为常数 队列：先进先出线性结构，仅允许对队尾进行添加（enqueue）操作，以及对队首进行删除（dequeue），访问（peek）操作，空间复杂度线性，单次操作时间复杂度为常数 需要解决的问题，在使用常数个额外空间的条件下： 使用两个栈尽可能高效地实现一个队列 使用两个队列尽可能高效地实现一个栈 解决方法 使用栈实现队列 思路 考虑到栈先进后出与队列先进先出的特点，使用一个栈 $A$ 作为队列尾，数据从这里流入；使用另一个栈 $B$ 作为队列头，数据从这里流出。我们要求先流入的数据先流出， 通过将栈 $A$ 中的元素不断弹出，并压入栈 $B$，利用先进后出特性，$B$ 的出栈顺序即 $A$ 出栈顺序的逆序，而 $A$ 出栈顺序为其入栈顺序的逆序，故 $B$ 的出栈顺序为 $A$ 的入栈顺序，即达到先进先出的效果。
栈能将输入逆序这一点很重要，之后我们还将用到。
复杂度分析 空间复杂度：栈的空间复杂度是线性的，而且这里队列中的每一个数据仅会在两个栈中的某一个中存在，故此实现的空间复杂度为线性 时间复杂度：注意到每个数据从入队到出队只会经历：进入 $A$，离开 $A$，进入 $B$，离开 $B$ 四次移动，且每次移动复杂度为常数，故均摊复杂度为常数。 使用队列实现栈 思路 这里遇到了个难题：利用栈可以很容易地支持翻转操作，但队列无法直接对输入序列进行顺序的改变。
队列中一个重要特点是，我们可以通过不断删除队列头，并将其放入队列尾，实现在不影响顺序的前提下对队列中每个元素的访问，访问一遍后，我们仍可以很容易恢复到最初的队列状态。 但这一操作的弊端是，我们访问某个元素，必须将其前面的所有元素出队，这一操作的时间复杂度是最坏情况下是线性的。
既然我们能访问所有元素了，那只要访问最后一个就是先入后出了，很简单嘛，可是队列“滚”的次数太多了（为线性）&amp;hellip;
为下文叙述方便，将上述操作定义为过程“循环出入队”，即将队首出队后入队，实现队列滚动。时间复杂度由以上分析，为 $O(|Q|))$。 我们使用一个类似缓冲池的技巧：设两个队列 $Q_s,Q_a$，$Q_a$ 用于存储靠近栈顶的一部分元素，$Q_s$ 用于存储其余的元素。其中 $Q_a$ 有可变的容量上限 $cap(Q_a)$，$Q_s$ 容量无限制。
你可以把 $Q_s$ 看成内存（主存），把 $Q_a$ 看成 CPU 中的高速缓存</description></item></channel></rss>