{"Id":"Learning/multimod-64bit-method","Type":0,"AuthorId":"","Content":{"Tag":"","Raw":"\n# \u95EE\u9898\u5F15\u5165\n\n\u7ED9\u5B9A $64$ \u4F4D\u6709\u7B26\u53F7\u6574\u6570 $a,b,m$ \uFF08\u7C7B\u578B\u4E3A \u0060int64_t\u0060\uFF09\uFF0C\u4F60\u5E0C\u671B\u6C42\u51FA $a\\times b \\bmod m$ \u7684\u6570\u503C\u3002\n\n\u0060\u0060\u0060c\nint64_t multimod(int64_t a, int64_t b, int64_t m);\n\u0060\u0060\u0060\n\n\u7ED9\u51FA\u4E00\u4E2A\u5C3D\u53EF\u80FD\u9AD8\u6548\u7684\u6B63\u786E \u0060multimod\u0060 \u5B9E\u73B0\u3002\u4F7F\u5F97\u5B83\u5BF9\u4E8E\u4EFB\u610F\u5728 $[0,2^{63}-1]$ \u8303\u56F4\u5185\u7684 $a,b,m$ \u5747\u80FD\u6B63\u786E\u6C42\u51FA $a\\times b \\bmod m$ \u7684\u6570\u503C\uFF0C\u4E14\u5728\u4EFB\u4F55\u65F6\u5019\u4E0D\u89E6\u53D1\u6709\u7B26\u53F7\u6574\u6570\u6EA2\u51FA\u3002\n\n# \u89E3\u51B3\u65B9\u6CD5\n\n## \u8FD0\u884C\u73AF\u5883\n\nWindows 10 \uFF0864 \u4F4D\uFF09 \u4E0A Hyper-V \u5E73\u53F0\uFF0CDebian 9 \u865A\u62DF\u673A \uFF0864 \u4F4D\uFF09\n- CPU \u578B\u53F7\uFF1AIntel(R) Core(TM) i7-7700HQ\n- CPU \u4E3B\u9891\uFF1A2.80 GHz\n\n## \u57FA\u7840\u8BBE\u65BD\n\n\u4E3A\u4F7F\u5B9E\u9A8C\u987A\u5229\uFF0C\u5B9E\u9A8C\u524D\u5148\u51C6\u5907\u4E86\u6D4B\u8BD5\u7A0B\u5E8F\u548C\u65F6\u95F4\u6D4B\u91CF\u7A0B\u5E8F\u3002\n\n### \u6D4B\u8BD5\u7A0B\u5E8F\n\n\u4F7F\u7528 Python \u81EA\u52A8\u751F\u6210\u6D4B\u8BD5\u7528\u4F8B\uFF0C\u8FD0\u884C\u7A0B\u5E8F\uFF0C\u68C0\u67E5\u8F93\u51FA\u3002\n\n\u0060\u0060\u0060python checker.py\nimport os\nimport random\nimport sys\n\ndef getNum():\n    return random.randint(0,2**63-1)\n\nif __name__==\u0022__main__\u0022:\n    cnt = 10**4;\n    passed = 0\n    failed = 0\n    if len(sys.argv)\u003E1:\n        cnt = int(sys.argv[1])\n    print(\u0022Running\u0022)\n    for i in range(cnt):\n        a,b,m = getNum(),getNum(),getNum()\n        ans = a*b%m\n        _ans = int(os.popen(\u0022 \u0022.join([\u0022./runner\u0022,str(a),str(b),str(m)])).read())\n        if ans != _ans:\n            if failed \u003C= 5:\n                print(\u0022Error for a =\u0022,a,\u0022b =\u0022,b,\u0022m =\u0022,m,\u0022:\u0022)\n                print(\u0022expected\u0022,ans,\u0022but real\u0022,_ans)\n            failed\u002B=1\n        else:\n            passed\u002B=1\n    print(\u0022Test\u0022,cnt,\u0022cases\u0022);\n    print(\u0022Passed\u0022,passed);\n    print(\u0022Failed\u0022,failed);\n\u0060\u0060\u0060\n\n\u5176\u4E2D \u0060runner\u0060 \u7A0B\u5E8F\u8C03\u7528 \u0060multimod\u0060 \u5E76\u5C06\u7ED3\u679C\u8F93\u51FA\u3002\n\n\u0060\u0060\u0060c runner.c\n#include \u003Cstdint.h\u003E\n#include \u003Cassert.h\u003E\n#include \u003Cstring.h\u003E\n#include \u003Cstdio.h\u003E\n#include \u0022p.c\u0022\n\ntypedef int64_t (*func)(int64_t, int64_t, int64_t);\n\nint main(int argc, char *argv[]){\n    assert(argc == 4);\n    int64_t a, b, m;\n    sscanf(argv[1], \u0022%lld\u0022, \u0026a);\n    sscanf(argv[2], \u0022%lld\u0022, \u0026b);\n    sscanf(argv[3], \u0022%lld\u0022, \u0026m);\n    func f = multimod;\n    int64_t ans = f(a, b, m);\n    printf(\u0022%lld\\n\u0022,ans);\n    return 0;\n}\n\u0060\u0060\u0060\n\n### \u8BA1\u65F6\u7A0B\u5E8F\n\n\u4F7F\u7528 Python \u968F\u673A\u751F\u6210\u6D4B\u8BD5\u7528\u4F8B\uFF0C\u8C03\u7528\u8BA1\u65F6\u7A0B\u5E8F\u5F97\u5230\u5355\u6B21\u8FD0\u884C\u65F6\u95F4\uFF0C\u7EDF\u8BA1\u540E\u53D6\u5E73\u5747\u503C\uFF0C\u4F1A\u8F93\u51FA\u603B\u8017\u65F6\uFF0C\u5E73\u5747\u8017\u65F6\uFF0C\u548C\u6700\u5927\u8017\u65F6\uFF0C\u6700\u5C0F\u8017\u65F6\u3002\n\n\u0060\u0060\u0060python measure.py\nimport os\nimport random\nimport sys\nimport time\n\ndef getNum():\n    return random.randint(0,2**63-1)\n\nif __name__==\u0022__main__\u0022:\n    cnt = 10**4;\n    passed = 0\n    failed = 0\n    if len(sys.argv)\u003E1:\n        cnt = int(sys.argv[1])\n    print(\u0022Running\u0022)\n    start = time.time()\n    l = []\n    for i in range(cnt):\n        a,b,m = getNum(),getNum(),getNum()\n        ans = int(os.popen(\u0022 \u0022.join([\u0022./timer\u0022,str(a),str(b),str(m)])).read())\n        l.append((a,b,m,ans))\n    end = time.time()\n    print(\u0022Test\u0022,cnt,\u0022cases use\u0022,end-start,\u0022seconds\u0022);\n    _l = list(map(lambda x: x[3],l))\n    sumC = sum(_l)\n    print(\u0022Sum CPU cycles:\u0022,sumC)\n    print(\u0022Average CPU cycles:\u0022,sumC / len(l))\n    mx,mn = max(_l),min(_l)\n    idmx,idmn = _l.index(mx),_l.index(mn)\n    print(\u0022Maximum:\u0022, mx, \u0022@\u0022, l[idmx])\n    print(\u0022Minimum:\u0022, mn, \u0022@\u0022, l[idmn])\n\u0060\u0060\u0060\n\n\u5176\u4E2D \u0060timer\u0060 \u7A0B\u5E8F\u8C03\u7528 \u0060multimod\u0060 \u8FDB\u884C\u8FD0\u7B97\u5E76\u4F7F\u7528 Linux \u4E2D\u7684 \u0060clock_gettime\u0060 \u51FD\u6570\u83B7\u53D6\u6267\u884C\u65F6\u95F4\uFF08\u7EB3\u79D2\u7EA7\uFF0CCPU \u65F6\u949F\u6570\uFF09\u3002\n\n\u0060\u0060\u0060c timer.c\n#include \u003Cstdint.h\u003E\n#include \u003Cassert.h\u003E\n#include \u003Cstdio.h\u003E\n#include \u003Ctime.h\u003E\n\n#include \u0022p.c\u0022\n\ntypedef int64_t (*func)(int64_t, int64_t, int64_t);\nvolatile int64_t a, b, m;\nuint64_t measure(func f){\n    struct timespec st;\n    clock_gettime(CLOCK_MONOTONIC,\u0026st);\n    int64_t before = st.tv_nsec;\n    f(a, b, m);\n    clock_gettime(CLOCK_MONOTONIC,\u0026st);\n    int64_t after = st.tv_nsec;\n    return after - before;\n}\n\nint main(int argc, char *argv[]){\n    assert(argc == 4);\n    sscanf(argv[1], \u0022%lld\u0022, \u0026a);\n    sscanf(argv[2], \u0022%lld\u0022, \u0026b);\n    sscanf(argv[3], \u0022%lld\u0022, \u0026m);\n    func f = multimod;\n    uint64_t ans = measure(f);\n    printf(\u0022%llu\\n\u0022,ans);\n    return 0;\n}\n\u0060\u0060\u0060\n\n### Makefile\n\nMakefile \u6587\u4EF6\u6307\u5B9A\u4F9D\u8D56\u5173\u7CFB\uFF0C\u4F7F\u7528 \u0060make check\u0060 \u548C \u0060make time\u0060 \u8C03\u7528\u4E0A\u8FF0\u7A0B\u5E8F\u3002\n\n\u0060\u0060\u0060makefile\n.PHONY : clean time check all\n\nall : timer runner\n\t@echo \u0022Builded\u0022\n\n# p.o : p.c\n\t# $(CC) p.c -c $(CFLAGS) -o p.o\n\ntimer: timer.o p.c\n\t$(CC) -o timer timer.o $(CFLAGS) $(LDFLAGS) -O2\n\nrunner: runner.o p.c\n\t$(CC) -o runner runner.o $(CFLAGS) $(LDFLAGS) -O2\n\ntime: timer\n\t@python3 ./measure.py\n\ncheck: runner\n\t@python3 ./checker.py\n\nclean:\n\t-rm -f *.o\n\u0060\u0060\u0060\n\n\u6709\u4E86\u4E0A\u8FF0\u57FA\u7840\u8BBE\u65BD\u540E\uFF0C\u4E0B\u9762\u5F00\u59CB\u7F16\u5199 \u0060multimod\u0060 \u51FD\u6570\u3002\n\n## \u57FA\u51C6\u5B9E\u73B0\n\n\u4F7F\u7528\u6734\u7D20\u4E8C\u8FDB\u5236\u4E58\u6CD5\uFF0C\u8BBE\u8F93\u5165 $A,B$\uFF0C\u5219\u7ED3\u679C $C$ \u6709 \n\n$$C_{i\u002Bj} = \\sum_{0\\le i,j \u003C 64} A_iB_j$$\n\n\u5219\u6709\n\n$$Ans=(\\sum_{0\\le i \u003C 128} (C_i\\times 2^i)\\bmod m)\\bmod m$$\n\n\u6CE8\u610F\u5230 $0\\le m \u003C 2^{63}$\uFF0C\u4E24\u4E2A $m$ \u4EE5\u5185\u7684\u6570\u76F8\u52A0\u4E0D\u4F1A\u53D1\u751F\u65E0\u7B26\u53F7\u6EA2\u51FA\u3002\u6545\u8F6C\u6210\u65E0\u7B26\u53F7\u6570\uFF0C\u5C06\u4E58 $2^i$\uFF0C\u8F6C\u5316\u4E3A $i$ \u6B21\u7FFB\u500D\u8FED\u4EE3\u53D6\u6A21\u5C31\u53EF\u4EE5\u907F\u514D\u6EA2\u51FA\u3002\n\n\u6700\u7EC8\u7A0B\u5E8F\u4E3A\uFF1A\n\n\u0060\u0060\u0060c p1.c\n#include \u003Cstdint.h\u003E\nint64_t multimod(int64_t a, int64_t b, int64_t m){\n    const int L = 128;\n    uint64_t c[L];\n    for(int i = 0; i \u003C L; i\u002B\u002B)\n        c[i] = 0;\n    for(int i = 0; i \u003C 64; i\u002B\u002B)\n        for(int j = 0; j \u003C 64; j\u002B\u002B)\n            c[i\u002Bj]\u002B=((a\u003E\u003Ei\u00261)\u0026(b\u003E\u003Ej\u00261));\n    uint64_t ans = 0;\n    for(int i=0;i\u003CL;i\u002B\u002B){\n        uint64_t t = c[i];\n        for(int j=0;j\u003Ci;j\u002B\u002B)\n            t=(t\u003C\u003C1)%m;\n        ans=(ans\u002Bt)%m;\n    }\n    return ans;\n}\n\u0060\u0060\u0060\n\n\u4F7F\u7528 \u0060make check\u0060 \u6D4B\u8BD5\uFF0C\u8F93\u51FA\u5982\u4E0B\uFF1A\n\n\u0060\u0060\u0060\nRunning\nTest 10000 cases\nPassed 10000\nFailed 0\n\u0060\u0060\u0060\n\n\u901A\u8FC7\u6D4B\u8BD5\u3002\n\n## \u6027\u80FD\u4F18\u5316\n\n### \u4F18\u53161\uFF1A\u4E8C\u8FDB\u5236\u62C6\u5206\n\n\u4F7F\u7528 ACM/ICPC \u5708\u5B50\u4E2D\u5E38\u7528\u7684\u4E00\u79CD\u8BA1\u7B97 $ab \\bmod m$ \u7684\u7B97\u6CD5\u3002\u5C06 $b$ \u4E8C\u8FDB\u5236\u62C6\u5206\uFF0C\u5F97\u5230\u5176\u4E8C\u8FDB\u5236\u8868\u793A $(b_{63}\\dots b_0)_2$\uFF0C\u5219\n\n$$ab=\\sum_{0\\le i\u003C64} b_i\\times a2^i$$\n\n$a2^i$ \u53EF\u4EE5\u9012\u63A8\u5F97\u5230\uFF0C\u7531\u6B64\u53EF\u5F97\u5230 $O(\\log b)$ \u7684\u7B97\u6CD5\u3002\u7C7B\u4F3C\u57FA\u51C6\u5B9E\u73B0\u4E2D\u8BA8\u8BBA\uFF0C\u8F6C\u6210\u65E0\u7B26\u53F7\u6570\u540E\u4E0D\u4F1A\u51FA\u73B0\u6EA2\u51FA\u95EE\u9898\u3002\n\n\u0060\u0060\u0060c p2.c\n#include \u003Cstdint.h\u003E\nint64_t multimod(int64_t a, int64_t b, int64_t m){\n    uint64_t _a = a % m, _b = b % m;\n    uint64_t ans = 0;\n    while(_b){\n        if(_b \u0026 1){\n            ans\u002B=_a;\n            ans%=m;\n        }\n        _a\u002B=_a;\n        _a%=m;\n        _b\u003E\u003E=1;\n    }\n    return ans;\n}\n\u0060\u0060\u0060\n\n\u4F7F\u7528 \u0060make check\u0060 \u6D4B\u8BD5\uFF0C\u8F93\u51FA\u5982\u4E0B\uFF1A\n\n\u0060\u0060\u0060\nRunning\nTest 10000 cases\nPassed 10000\nFailed 0\n\u0060\u0060\u0060\n\n\u901A\u8FC7\u6D4B\u8BD5\u3002\n\n### \u4F18\u53162\uFF1A\u9AD8\u4F4E\u4F4D\u5206\u522B\u5904\u7406\n\n\u7C7B\u6BD4\u8BA1\u7B97 32 \u4F4D\u6574\u6570\u4E58\u79EF\u65F6\u7684\u7B97\u6CD5\u3002\u5C06 $a,b$ \u7684\u9AD832\u4F4D\uFF0C\u548C\u4F4E32\u4F4D\u5404\u81EA\u53D6\u51FA\uFF0C\u5F97\u5230\n\n$$a=a_1\\times 2^{32} \u002B a_0$$\n$$b=b_1\\times 2^{32} \u002B b_0$$\n\n\u5219\n\n$$\n\\begin{aligned}\nab\u0026=(a_1\\times 2^{32} \u002B a_0)(b_1\\times 2^{32} \u002B b_0)\\\\\n\u0026=a_1b_1\\times 2^{64} \u002B (a_0b_1\u002Ba_1b_0)\\times 2^{32} \u002B a_0b_0\n\\end{aligned}\n$$\n\n\u7531\u8F93\u5165\u8303\u56F4\u9650\u5236\uFF0C\u53EF\u5F97 $a_1b_1\u003C2^{64},a_0b_1\u002Ba_1b_0\u003C2^{64}$\uFF0C\u4F46 $a_0b_0$ \u53EF\u80FD\u53D1\u751F\u4E00\u4F4D\u6EA2\u51FA\uFF08\u56E0\u4E3A $a_0,b_0$ \u53EF\u80FD\u7B49\u4E8E $2^{32}-1$\u3002\n\n\u8BBE $ab=c=c_1\\times 2^{64} \u002B c_0$\uFF0C\u5219\u6709\n\n$$c_1 = a_1b_1\u002B(a_0b_1\u002Ba_1b_0)_ {h32} \u002B \\text{OF}(a_0b_0)$$\n$$c_0 = (a_0b_0)\\bmod 2^{32}\u002B(a_0b_1\u002Ba_1b_0)_{l32}$$\n\n\u7531\u6B64\u53EF\u8BA1\u7B97\u5F97\u51FA $c_1,c_0$\uFF0C\u7531\u57FA\u51C6\u5B9E\u73B0\u4E2D\u8BA8\u8BBA\uFF0C\u5C06 $c_1\\times 2^{64} \\bmod m$ \u8F6C\u5316\u6210 $64$ \u6B21\u7FFB\u500D\u8FED\u4EE3\uFF0C\u907F\u514D\u6EA2\u51FA\u95EE\u9898\u3002\n\n\u0060\u0060\u0060c p3.c\n#include \u003Cstdint.h\u003E\n// #include \u003Cassert.h\u003E\nstatic uint32_t _32f = (~((uint32_t)0));\nstatic uint64_t _64f = (~((uint64_t)0));\nint64_t multimod(int64_t a, int64_t b, int64_t m){\n    uint64_t a1 = a\u003E\u003E32, a0 = a\u0026_32f;\n    uint64_t b1 = b\u003E\u003E32, b0 = b\u0026_32f;\n    uint64_t t = a1*b0 \u002B a0*b1;\n    uint64_t t1 = t\u003E\u003E32, t0 = t\u0026_32f, tc0 = a0*b0;\n    uint64_t c1 = a1*b1 \u002B t1, c0 = tc0 \u002B (t0\u003C\u003C32);\n    if(c0\u003Ctc0) // overflow\n        c1\u002B\u002B;\n    // __int128 _cor = ((__int128)a)*((__int128)b);\n    // assert((_cor\u003E\u003E64)==c1);\n    // assert((_cor\u0026_64f)==c0);\n    for(int i=0;i\u003C64;i\u002B\u002B)\n        c1 = (c1\u003C\u003C1)%m;\n    return (c0%m \u002B c1)%m;\n}\n\u0060\u0060\u0060\n\n\u4F7F\u7528 \u0060make check\u0060 \u6D4B\u8BD5\uFF0C\u8F93\u51FA\u5982\u4E0B\uFF1A\n\n\u0060\u0060\u0060\nRunning\nTest 10000 cases\nPassed 10000\nFailed 0\n\u0060\u0060\u0060\n\n\u901A\u8FC7\u6D4B\u8BD5\u3002\n\n### \u6548\u7387\u5B9E\u6D4B\n\n\u4F7F\u7528 \u0060make time\u0060 \u6D4B\u8BD5\u5F97\u5230\u3002\u4EE5\u4E0B\u8868\u683C\u4E2D\u6570\u503C\u4E3A\u6D4B\u8BD5 10000 \u7EC4\u968F\u673A\u7528\u4F8B\uFF0C\u5F97\u5230\u7684\u5E73\u5747\u5355\u6B21\u64CD\u4F5C CPU \u65F6\u949F\u6570\u3002\n\n|\u7A0B\u5E8F|\u0060O0\u0060|\u0060O1\u0060|\u0060O2\u0060|\n|-|-|-|-|\n|\u0060p1.c\u0060|$98554.87$|$102880.89$|$100160.11$|\n|\u0060p2.c\u0060|$1470.79$|$1472.98$|$1473.57$|\n|\u0060p3.c\u0060|$1185.46$|$1217.1$|$1207.91$|\n\n\u53EF\u89C1\u4F18\u5316 1\uFF0C2 \u8F83\u57FA\u51C6\u5B9E\u73B0\u63D0\u9AD8\u663E\u8457\uFF0C\u4E0D\u540C\u7F16\u8BD1\u4F18\u5316\u7EA7\u522B\u5BF9\u6B64\u7A0B\u5E8F\u8FD0\u884C\u6548\u7387\u5F71\u54CD\u4E0D\u5927\u3002\n\n\u6CE8\uFF1A\u0060make time\u0060 \u8F93\u51FA\u5185\u5BB9\n\n\u0060\u0060\u0060sh\n# -O0\n\n# p1.c\n\nRunning\nTest 10000 cases use 11.16751217842102 seconds\nSum CPU cycles: 985548700\nAverage CPU cycles: 98554.87\nMaximum: 4802300 @ (2265130052289059763, 7783645480371944058, 3115603639858794422, 4802300)\nMinimum: 87600 @ (20906801206135418, 1235445072834323451, 7495840395140955697, 87600)\n\n# p2.c\n\nRunning\nTest 10000 cases use 11.892813444137573 seconds\nSum CPU cycles: 14707900\nAverage CPU cycles: 1470.79\nMaximum: 142700 @ (1598719057711499987, 8349967337302892367, 5320637895082198498, 142700)\nMinimum: 1000 @ (7326329361318569666, 6606926909931228833, 6606926867070148477, 1000)\n\n# p3.c\n\nRunning\nTest 10000 cases use 12.87213659286499 seconds\nSum CPU cycles: 11854600\nAverage CPU cycles: 1185.46\nMaximum: 58500 @ (957615596508775045, 4417329977803451093, 6085566768103491103, 58500)\nMinimum: 900 @ (3868418006544775637, 3115279496994464447, 2343316703378067646, 900)\n\n# -O1\n\n# p1.c\n\nRunning\nTest 10000 cases use 12.523572444915771 seconds\nSum CPU cycles: 1028808900\nAverage CPU cycles: 102880.89\nMaximum: 1932400 @ (7242145147389599538, 1833121011939475515, 6206342766087253890, 1932400)\nMinimum: 87500 @ (1822799065865324744, 2537174733001160, 158801504793342122, 87500)\n\n# p2.c\n\nRunning\nTest 10000 cases use 10.98656439781189 seconds\nSum CPU cycles: 14729800\nAverage CPU cycles: 1472.98\nMaximum: 75600 @ (221577760594163762, 3833386045247446405, 2751795901368777150, 75600)\nMinimum: 1100 @ (371764953656247878, 5957505246066178493, 661631939839983461, 1100)\n\n# p3.c\n\nRunning\nTest 10000 cases use 13.122157096862793 seconds\nSum CPU cycles: 12171000\nAverage CPU cycles: 1217.1\nMaximum: 271900 @ (7398188815938423410, 8253708753758420468, 4659411386263076728, 271900)\nMinimum: 900 @ (3809943949718199994, 3287343789103329664, 8650829315397374343, 900)\n\n# -O2\n\n# p1.c\n\nRunning\nTest 10000 cases use 13.260606288909912 seconds\nSum CPU cycles: 1001601100\nAverage CPU cycles: 100160.11\nMaximum: 926300 @ (339379419259308487, 3491644293891775690, 4785117665160931184, 926300)\nMinimum: 87500 @ (5052948108270793981, 27482781138671, 7792928891817598563, 87500)\n\n# p2.c\n\nRunning\nTest 10000 cases use 12.278534412384033 seconds\nSum CPU cycles: 14735700\nAverage CPU cycles: 1473.57\nMaximum: 132100 @ (7176780085212300945, 2291171313687225809, 7324459208582226040, 132100)\nMinimum: 1000 @ (9203745517614844759, 6874714748664006916, 67857160092233, 1000)\n\n# p3.c\n\nRunning\nTest 10000 cases use 12.674974918365479 seconds\nSum CPU cycles: 12079100\nAverage CPU cycles: 1207.91\nMaximum: 202400 @ (8532847693583176248, 6988877428537774137, 8782939934027677977, 202400)\nMinimum: 900 @ (3971319143760212181, 2705697508146050036, 1115671950010882609, 900)\n\u0060\u0060\u0060\n\n# \u6269\u5C55\u9605\u8BFB\n\n\u65E0\n\n# \u5F15\u7528\u8D44\u6599\n\n\u65E0\n"},"Title":"64\u4F4D\u6709\u7B26\u53F7\u6570\u4E58\u6CD5\u53D6\u6A21\u95EE\u9898","Category":{"Items":["Learning"]},"Keywords":{"Items":[]},"CreationTime":"2018-10-25T17:30:22+08:00","ModificationTime":"2018-10-25T17:30:22+08:00"}