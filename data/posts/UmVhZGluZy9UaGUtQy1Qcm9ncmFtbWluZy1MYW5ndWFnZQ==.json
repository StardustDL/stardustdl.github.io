{"Id":"Reading/The-C-Programming-Language","Type":2,"Author":"","Content":{"Tag":"","Raw":"\n- \u4E66\u7C4D\u540D\uFF1A**The C Programming Language (Second Edition)**\n- \u4F5C\u8005\uFF1ABrian W. Kernighan / Dennis M. Ritchie \n- \u51FA\u7248\u65F6\u95F4\uFF1A1988-4-1\n- \u57FA\u672C\u4ECB\u7ECD\uFF1A\u300AC\u7A0B\u5E8F\u8BBE\u8BA1\u8BED\u8A00\u300B\u539F\u8457 \u5373\u4E3AC\u8BED\u8A00\u7684\u8BBE\u8BA1\u8005Dennis M\uFF0ERitchie\u548C\u8457\u540D\u7684\u8BA1\u7B97\u673A\u79D1\u5B66\u5BB6Brian W\uFF0EKernighan\u5408\u8457\u7684 \u4E00\u672C\u4ECB\u7ECDC\u8BED\u8A00\u7684\u6743\u5A01\u7ECF\u5178\u8457\u4F5C\u3002\u539F\u8457\u7B2C1\u7248\u4E2D\u4ECB\u7ECD\u7684C\u8BED\u8A00\u6210\u4E3A\u540E\u6765\u5E7F\u6CDB\u4F7F\u7528\u7684C\u8BED\u8A00\u7248\u672C\u2014\u2014 \u6807\u51C6C\u7684\u57FA\u7840\u3002\u4EBA\u4EEC\u719F\u77E5\u7684\u201CHello, World\u201D\u7A0B\u5E8F\u5C31\u662F\u7531\u300AC\u7A0B\u5E8F\u8BBE\u8BA1\u8BED\u8A00\u300B\u9996\u6B21\u5F15\u5165\u7684\u3002\u539F\u8457\u7B2C2\u7248\u6839\u636E1987\u5E74\u5236\u5B9A\u7684ANSIC\u6807\u51C6\u505A\u4E86\u9002\u5F53\u7684\u4FEE\u8BA2\u3002\n\n------\n\n# \u7B2C\u4E8C\u7AE0\n\n- \u679A\u4E3E \u0060enum id{A=1,B=2,...}\u0060\n- \u5B57\u7B26\u4E32\u652F\u6301\u8FDE\u63A5 \u0060\u0022abc\u0022 \u0022def\u0022=\u0022abcdef\u0022\u0060\n- \u0060ctype\u0060 \u4E2D\u7684\u51FD\u6570\u4E0E\u5B57\u7B26\u8868\u65E0\u5173\n- \u4F7F\u7528 \u0060unsigned\u0060 \u7684\u53D8\u91CF\u5728\u9690\u5F0F\u8F6C\u6362\u65F6\u548C\u5177\u4F53\u5B9E\u73B0\u6709\u5173\u8981\u5341\u5206\u6CE8\u610F\uFF0C\u53EF\u80FD\u4E0D\u662F\u9884\u671F\u7684\u3002\n- float \u4E0D\u4F1A\u81EA\u52A8\u63D0\u5347\u4E3A double\n- \u4F2A\u968F\u673A\u6570\u7B97\u6CD5 $[0,32767]$ \u7684\u4F2A\u968F\u673A\u6574\u6570\n\n\u0060\u0060\u0060c\nunsigned long int _next=1;\nint rand(){\n    _next=_next*1103515245\u002B12345;\n    return (unsigned int)(_next/65536)%32768;\n}\nvoid srand(unsigned int seed){_next=seed;}\n\u0060\u0060\u0060\n\n- \u9017\u53F7\u8868\u8FBE\u5F0F\u4ECE\u5DE6\u5230\u53F3\u6C42\u503C\uFF0C\u6700\u53F3\u4FA7\u7684\u8868\u8FBE\u5F0F\u4E3A\u5176\u7ED3\u679C\u503C\u3002\u51FD\u6570\u53C2\u6570\u4E2D\u7684\u9017\u53F7\u4E0D\u662F\u9017\u53F7\u8868\u8FBE\u5F0F\uFF0CC\u8BED\u8A00\u6CA1\u6709\u5B9A\u4E49\u5176\u8FD0\u7B97\u987A\u5E8F\n- \u5BF9\u4E8E\u4E00\u4E2A\u8FD0\u7B97\uFF0C\u5DE6\u53F3\u8868\u8FBE\u5F0F\u7684\u8FD0\u7B97\u5148\u540E\u662F\u4E0D\u786E\u5B9A\u7684\u3002\n\n# \u7B2C\u4E09\u7AE0\n\n- Shell-Sort\n\u0060\u0060\u0060c\nvoid shellsort(int v[],int n){\n    for(int gap=n\u003E\u003E1;gap;gap\u003E\u003E=1)\n        for(int i=gap;i\u003Cn;i\u002B\u002B)\n            for(int j=i-gap;j\u003E=0 \u0026\u0026 v[j]\u003Ev[j\u002Bgap];j-=gap)\n                swap(v[j],v[j\u002Bgap]);\n}\n\u0060\u0060\u0060\n\n# \u7B2C\u56DB\u7AE0\n\n- \u0060external\u0060,\u0060internal\u0060 \u5173\u952E\u5B57\u4FEE\u9970\u53D8\u91CF\n- \u0060register\u0060 \u5173\u952E\u5B57\uFF0C\u5BC4\u5B58\u5668\u53D8\u91CF\u5730\u5740\u4E0D\u53EF\u8BBF\u95EE\n- \u0060static\u0060 \u5173\u952E\u5B57\u4FEE\u9970\u5168\u5C40\u53D8\u91CF\uFF0C\u4F7F\u53D8\u91CF\u9650\u5B9A\u5728\u5F53\u524D\u7F16\u8BD1\u6587\u4EF6\u4E2D\n\n## \u9884\u5904\u7406\n\n### \u5B8F\u5B9A\u4E49\n\n- \u884C\u672B\u4F7F\u7528 \u0060\\\u0060 \u4F7F\u7528\u591A\u884C\u5B9A\u4E49\n- \u0060undef\u0060 \u53D6\u6D88\u5B8F\u5B9A\u4E49\n- \u66FF\u6362\u6587\u672C\u4E2D \u0060#\u0060\u52A0\u5728\u53C2\u6570\u540D\u524D\uFF0C\u5219\u5C06\u4F1A\u751F\u6210\u548C\u53C2\u6570\u4E66\u5199\u5B8C\u5168\u76F8\u540C\u7684\u5B57\u7B26\u4E32\n\n\u0060\u0060\u0060c\n#define debug(expr) printf(#expr \u0022 = %g\\n\u0022,expr)\n\u0060\u0060\u0060\n\n- \u0060##\u0060 \u8FD0\u7B97\u7B26\n\n\u0060\u0060\u0060c\n#define paste(a,b) a ## b\npaste(name,1) =\u003E name1\n\u0060\u0060\u0060\n\n### \u6761\u4EF6\n\n- \u0060#if\u0060\n- \u0060#endif\u0060\n- \u0060#elif\u0060\n- \u0060#else\u0060\n- \u0060#ifdef = #if defined id\u0060\n- \u0060#ifndef = #if !defined id\u0060\n- \u0060#line constval [\u0022filename\u0022]\u0060\n- \u0060#error ...\u0060\n- \u0060#praga ...\u0060\n\n\n# \u7B2C\u4E94\u7AE0\n\n- \u0060void*\u0060 \u4F5C\u4E3A\u901A\u7528\u6307\u9488\n- \u6307\u9488\u5B9E\u73B0\u6570\u7EC4\u4E00\u822C\u5FEB\u4E8E\u4E0B\u6807\u5B9E\u73B0\u6570\u7EC4\n- \u6307\u9488\u652F\u6301\u548C\u6574\u6570\u52A0\u51CF\uFF0C\u4E0E\u6307\u9488\u76F8\u51CF\u548C\u6BD4\u8F83\u8FD0\u7B97\uFF08\u4F4D\u7F6E\u6BD4\u8F83\uFF09\n- \u6570\u7EC4\u548C\u6307\u9488\u4E0D\u5B8C\u5168\u7B49\u4EF7\uFF0C\u6570\u7EC4\u672C\u8EAB\u4E0D\u53EF\u53D8\uFF0C\u4F46\u6307\u9488\u53EF\u4EE5\n\n\u0060\u0060\u0060c\nvoid strcpy(char* s,char *t){\n    while(*s\u002B\u002B=*t\u002B\u002B);\n}\n*p\u002B\u002B=val;//push\nval=*--p;//pop\n\u0060\u0060\u0060\n\n- \u4EE5\u4E0B\u8868\u8FBE\u7B49\u4EF7\n\u0060\u0060\u0060c\nf(int c[2][13])\nf(int c[][13])\nf(int (*c)[13])\n\u0060\u0060\u0060\n\n# \u7B2C\u516D\u7AE0\n\n- \u0060union\u0060 \u7C7B\u578B\uFF1A\u540C\u4E00\u8D77\u70B9\uFF0C\u4E0D\u540C\u7C7B\u578B\u53D8\u91CF\uFF0C\u81EA\u52A8\u5BF9\u9F50\uFF0C\u53EA\u80FD\u5BF9\u7B2C\u4E00\u4E2A\u5143\u7D20\u521D\u59CB\u5316\n- \u4F4D\u5B57\u6BB5\uFF1A\u4E8C\u8FDB\u5236\u6807\u5FD7\u4F4D\u96C6\u5408\uFF0C\u540E\u9762\u7684\u6570\u5B57\u6307\u5B9A\u4F4D\u957F\uFF0C\u4EC5\u80FD\u4F7F\u7528 \u0060int\u0060\uFF0C\u4E0D\u652F\u6301 \u0060\u0026\u0060\n\u0060\u0060\u0060c\nstruct{\n    unsigned int a:1;\n    unsigned int b:1;\n}flgs;\n\u0060\u0060\u0060\n\n# \u7B2C\u4E03\u7AE0\n\n- \u0060exit(exitcode)\u0060 \n- \u0060printf\u0060 \u51FD\u6570\u683C\u5F0F\u5316\uFF1A\u0060%?\u0060 \u0060?\u0060 \u8868\u793A\u8F6C\u6362\u8BF4\u660E\n    - \u0060-\u0060 \u5DE6\u5BF9\u9F50\n    - \u6570\u5B57 \u6700\u5C0F\u5B57\u6BB5\u5BBD\u5EA6\u6216\u7CBE\u5EA6\n    - \u0060.\u0060 \u7528\u4E8E\u533A\u5206\u6700\u5C0F\u5B57\u6BB5\u5BBD\u5EA6\u548C\u7CBE\u5EA6\n    - \u0060h/l\u0060 \u6574\u6570\u4F5C\u4E3A \u0060short/long\u0060\n    - \u0060d/i\u0060 \u5341\u8FDB\u5236\u6574\u6570\n    - \u0060o\u0060 \u65E0\u7B26\u53F7\u516B\u8FDB\u5236\u6574\u6570\n    - \u0060x/X\u0060 \u65E0\u7B26\u53F7\u5341\u516D\u8FDB\u5236\u6574\u6570\uFF0C\u6307\u5B9A\u5927\u5C0F\u5199\n    - \u0060u\u0060 \u65E0\u7B26\u53F7\u5341\u8FDB\u5236\u6574\u6570\n    - \u0060c\u0060 \u5B57\u7B26\n    - \u0060f\u0060 double \u5341\u8FDB\u5236\u5C0F\u6570\n    - \u0060e/E\u0060 double \u5341\u8FDB\u5236\u5C0F\u6570 \u79D1\u5B66\u8BB0\u6570\u6CD5\n    - \u0060g/G\u0060 double \u5341\u8FDB\u5236\u5C0F\u6570 \u6839\u636E\u6307\u6570\u51B3\u5B9A\u4F7F\u7528\u54EA\u4E00\u79CD\u8868\u793A\u65B9\u5F0F\n    - \u0060p\u0060 void* \u7C7B\u578B\n    - \u4F7F\u7528 \u0060*\u0060 \u6307\u5B9A\u5BBD\u5EA6\u6216\u7CBE\u5EA6\uFF0C\u5C06\u4F7F\u7528\u4E0B\u4E00\u53C2\u6570\uFF08int\uFF09\u5F97\u5230\n- \u53D8\u957F\u53C2\u6570\n\u0060\u0060\u0060c\n#include \u003Cstdarg.h\u003E\nvoid f(char *a,...){\n    va_list ap;\n    va_start(ap,fmt);\n    for(char* p=fmt;*p;p\u002B\u002B){\n\n    }\n    va_end(ap);\n}\n\u0060\u0060\u0060\n- \u0060scanf\u0060 \u51FD\u6570 \u8FD4\u56DE\u6210\u529F\u8D4B\u503C\u7684\u4E2A\u6570\uFF0C\u6587\u4EF6\u7ED3\u5C3E\u8FD4\u56DE \u0060EOF\u0060\n\n## \u6587\u4EF6\n\n\u0060\u0060\u0060c\nFILE* fp=fopen(name,mode=\u0022r[\u002B]\u0022,\u0022w[\u002B]\u0022,\u0022a[\u002B]\u0022[,\u0022b\u0022])\n\n//\u4EE5\u4E0B\u662F\u5B8F\u800C\u4E0D\u662F\u51FD\u6570\nint getc(FILE *fp);\nint putc(int c,FILE* fp)=c;\nfscanf(FILE* fp,...)\nfprintf(FILE* fp,...)\n\n//\u6E05\u7A7A\u7F13\u51B2\u533A\u5E76\u5173\u95ED\u6587\u4EF6\nint fclose(FILE *fp)\nint fflush(FILE *fp)\nint ferror(FILE *fp)\nint feof(FILE *fp)\nchar* fgets(char*line,int maxvalue,FILE *fp)=success? line:NULL;\nchar* fputs(char*line,FILE *fp)=success? line:EOF;\nfgetc,fputc\nint ungetc(int c,FILE *fp)=success?c:EOF; //\u5199\u56DE\u4E00\u4E2A\u5B57\u7B26\uFF0C\u53EA\u80FD\u63A5\u53D7\u4E00\u4E2A\nint remove(const char* filename);//\u5220\u9664\u6587\u4EF6\uFF0C\u6210\u529F\u8FD4\u56DE0\nint rename(const char* filename);//\u91CD\u547D\u540D\u6587\u4EF6\uFF0C\u6210\u529F\u8FD4\u56DE0\nFILE* tmpfile();//wb\u002B\u521B\u5EFA\u4E34\u65F6\u6587\u4EF6\n\u0060\u0060\u0060\n- \u0060size_t fread(void*ptr,size_t size,size_t nobj,FILE *stream)\u0060 \u8BFB\u53D6\u6700\u591Anobj\u4E2A\u957F\u5EA6\u4E3Asize\u7684\u5BF9\u8C61\uFF0C\u5E76\u4FDD\u5B58\u5230ptr\u6570\u7EC4\u4E2D\uFF0C\u8FD4\u56DE\u8BFB\u53D6\u5230\u7684\u4E2A\u6570\u3002\n- \u0060size_t fwrite(const void*ptr,size_t size,size_t nobj,FILE *stream)\u0060 \u4ECEptr\u6570\u7EC4\u8BFB\u53D6nobj\u4E2A\u957F\u5EA6\u4E3Asize\u7684\u5BF9\u8C61\uFF0C\u5E76\u8F93\u51FA\uFF0C\u8FD4\u56DE\u8F93\u51FA\u7684\u4E2A\u6570\u3002\n- \u0060int fseek(FILE* stream, long offset,int origin)\u0060\n\u4ECEorigin\u504F\u79FBoffset\u4E2A\u4F4D\u7F6E\u3002origin=SEEK_SET,SEEK_CUR,SEEK_END\uFF0C\u6587\u672C\u6D41\u53EA\u80FD\u662Foffest\u53EA\u80FD\u662F0\u6216ftell\u5F97\u5230\u7684\u503C\u3002\n- \u0060long ftell(FILE *stream)\u0060 \u5F97\u5230\u5F53\u524D\u4F4D\u7F6E\uFF0C\u9519\u8BEF\u8FD4\u56DE-1L\n- \u0060void rewind(FILE *stream)\u0060 \u56DE\u5230\u8D77\u70B9\uFF0C\u6E05\u9664\u9519\u8BEF\u72B6\u6001\n- \u0060int fgetpos(FILE *stream,fpos_t *pos)\u0060 \u8BB0\u5F55\u5F53\u524D\u4F4D\u7F6E\u5230pos\n- \u0060int fsetpos(FILE *stream,const fpos_t *pos)\u0060\n- \u6807\u51C6\u6587\u4EF6\u6307\u9488 \u0060stdin,stdout,stderr\u0060\n\n## \u5B57\u7B26\u4E32\u51FD\u6570\n\n- \u0060strcat(s,t)\u0060\n- \u0060strncat(s,t,n)\u0060\n- \u0060strcmp(s,t)\u0060\n- \u0060strncmp(s,t,n)\u0060\n- \u0060strcpy(s,t)\u0060\n- \u0060strncpy(s,t,n)\u0060\n- \u0060strlen(s)\u0060\n- \u0060strchr(s,c)\u0060 \u6B63\u5411\u67E5\u627E\uFF0C\u8FD4\u56DE\u6307\u9488\n- \u0060strrchr(s,c)\u0060 \u53CD\u5411\u67E5\u627E\uFF0C\u8FD4\u56DE\u6307\u9488\n- \u0060memcpy(s,t,n)\u0060\n- \u0060memmove(s,t,n)\u0060\n- \u0060memcmp(s,t,n)\u0060\n- \u0060memchr(s,c,n)\u0060\n- \u0060memset(s,c,n)\u0060\n\n## \u66F4\u591A\u51FD\u6570\n\n- \u0060void* malloc(size_t n)\u0060 n\u5B57\u8282\u957F\u5EA6\n- \u0060void* calloc(size_t n,size_t size)\u0060 n\u4E2A\u6307\u5B9A\u5B57\u8282\u957F\u5EA6\u5143\u7D20\u7684\u7A7A\u95F4\n- \u0060free(p)\u0060 \u4EC5\u9650\u4F7F\u7528\u4E0A\u9762\u4E24\u4E2A\u51FD\u6570\u7533\u8BF7\u7684\u7A7A\u95F4\n- \u0060ldexp(x,n)\u0060 $=x\\cdot 2^n$\n- \u0060frexp(x,int* exp)\u0060 $x=a\\cdot 2^n$\uFF0C\u5176\u4E2D $a \\in [1/2,1]$\uFF0C\u8FD4\u56DE$a$\uFF0C$exp=n$\n- \u0060modf(x,double *ip)\u0060 \u8FD4\u56DE\u5C0F\u6570\u90E8\u5206\uFF0C$ip$=\u6574\u6570\u90E8\u5206\uFF0C\u7B26\u53F7\u5747\u548C $x$ \u76F8\u540C\n- \u0060fmod(x,y)\u0060 \u6D6E\u70B9\u4F59\u6570\n- \u0060double atof(char*)\u0060\n- \u0060int atoi(char*)\u0060\n- \u0060long atol(char*)\u0060\n- \u0060abort()\u0060\n- \u0060ateexit(void (*func)(void))\u0060 \u767B\u8BB0\u4E00\u4E2A\u7A0B\u5E8F\u6B63\u5E38\u7EC8\u6B62\u65F6\u8C03\u7528\u7684\u51FD\u6570\n"},"Title":"The C Programming Language","Category":{"Items":["Reading"]},"Keywords":{"Items":[]},"CreationTime":"2018-08-26T09:30:40+08:00","ModificationTime":"2018-08-26T09:30:40+08:00"}