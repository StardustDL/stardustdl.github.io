{"Id":"Problems/leetcode-102","Type":0,"Author":"","Content":{"Tag":"","Raw":"\n\u5E7F\u5EA6\u4F18\u5148\u904D\u5386\u3002\n\n\u0060\u0060\u0060rust\nuse std::cell::RefCell;\nuse std::collections::VecDeque;\nuse std::rc::Rc;\nimpl Solution {\n    pub fn level_order(root: Option\u003CRc\u003CRefCell\u003CTreeNode\u003E\u003E\u003E) -\u003E Vec\u003CVec\u003Ci32\u003E\u003E {\n        if root.is_none() {\n            return Vec::new();\n        }\n        let mut res = Vec::new();\n        let mut q = VecDeque::new();\n        q.push_back((0, Rc::try_unwrap(root.unwrap()).unwrap().into_inner()));\n        while let Some((dep, node)) = q.pop_front() {\n            if dep == res.len() {\n                res.push(vec![node.val]);\n            } else {\n                res[dep].push(node.val);\n            }\n            if let Some(l) = node.left {\n                q.push_back((dep \u002B 1, Rc::try_unwrap(l).unwrap().into_inner()));\n            }\n            if let Some(r) = node.right {\n                q.push_back((dep \u002B 1, Rc::try_unwrap(r).unwrap().into_inner()));\n            }\n        }\n        res\n    }\n}\n\u0060\u0060\u0060"},"Title":"LeetCode-102 \u4E8C\u53C9\u6811\u7684\u5C42\u5E8F\u904D\u5386","Category":{"Items":["Problems"]},"Keywords":{"Items":["leetcode"]},"CreationTime":"2020-07-28T16:53:22+08:00","ModificationTime":"2020-07-28T16:53:22+08:00"}