{"Id":"Problems/leetcode-155","Type":2,"Author":"","Content":{"Tag":"","Raw":"\n\u7EF4\u62A4\u4E00\u4E2A\u5355\u8C03\u6808\u3002\u4ECE\u6808\u5E95\u5230\u6808\u9876\u4F9D\u6B21\u51CF\u5C0F\u3002\n\n\u5BF9\u4E8E\u65B0\u503C $x$\uFF0C\u82E5\u5927\u4E8E\u6808\u9876\uFF0C\u5219\u53EF\u4EE5\u76F4\u63A5\u4E22\u5F03\uFF08\u56E0\u4E3A\u5176\u6C38\u8FDC\u4E0D\u4F1A\u6210\u4E3A\u6700\u5C0F\u503C\uFF09\uFF0C\u82E5\u5C0F\u4E8E\u7B49\u4E8E\u6808\u9876\uFF0C\u5219\u53EF\u5165\u6808\u3002\n\n\u0060\u0060\u0060rust\nimpl MinStack {\n    fn new() -\u003E Self {\n        MinStack { vals: Vec::new() }\n    }\n    fn push(\u0026mut self, x: i32) {\n        match self.vals.last() {\n            Some((_, mn)) =\u003E self.vals.push((x, std::cmp::min(*mn, x))),\n            None =\u003E self.vals.push((x, x)),\n        }\n    }\n    fn pop(\u0026mut self) {\n        self.vals.pop();\n    }\n    fn top(\u0026self) -\u003E i32 {\n        self.vals.last().unwrap().0\n    }\n    fn get_min(\u0026self) -\u003E i32 {\n        self.vals.last().unwrap().1\n    }\n}\n\u0060\u0060\u0060"},"Title":"LeetCode-155 \u6700\u5C0F\u6808","Category":{"Items":["Problems"]},"Keywords":{"Items":["leetcode"]},"CreationTime":"2020-07-28T16:53:40+08:00","ModificationTime":"2020-07-28T16:53:40+08:00"}