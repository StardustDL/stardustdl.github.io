{"Id":"Problems/leetcode-143","Type":2,"Author":"","Content":{"Tag":"","Raw":"\n\u8F6C\u6210\u6570\u7EC4\u91CD\u5EFA\u94FE\u8868\u3002\n\n\u0060\u0060\u0060rust\nimpl Solution {\n    pub fn reorder_list(head: \u0026mut Option\u003CBox\u003CListNode\u003E\u003E) {\n        match head {\n            Some(phead) =\u003E {\n                let mut vals = Vec::new();\n                let mut cur = \u0026phead.next;\n                while let Some(v) = cur {\n                    vals.push(v.val);\n                    cur = \u0026v.next;\n                }\n                if vals.is_empty() {\n                    return;\n                }\n                let mut rvals = Vec::new();\n                let mut l = 0 as isize;\n                let mut r = (vals.len() - 1) as isize;\n                rvals.push(vals[r as usize]);\n                r -= 1;\n                while l \u003C= r {\n                    rvals.push(vals[l as usize]);\n                    l \u002B= 1;\n                    if l \u003E r {\n                        break;\n                    }\n                    rvals.push(vals[r as usize]);\n                    r -= 1;\n                }\n                let mut cur = ListNode::new(rvals[rvals.len() - 1]);\n                for i in (0..rvals.len() - 1).rev() {\n                    cur = ListNode {\n                        val: rvals[i],\n                        next: Some(Box::new(cur)),\n                    };\n                }\n                phead.next = Some(Box::new(cur));\n            }\n            None =\u003E (),\n        }\n    }\n}\n\u0060\u0060\u0060"},"Title":"LeetCode-143 \u91CD\u6392\u94FE\u8868","Category":{"Items":["Problems"]},"Keywords":{"Items":["leetcode"]},"CreationTime":"2020-07-28T16:53:36+08:00","ModificationTime":"2020-07-28T16:53:36+08:00"}