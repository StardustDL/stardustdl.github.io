{"Id":"Problems/leetcode-5465","Type":0,"AuthorId":"","Content":{"Tag":"","Raw":"\n\u6CE8\u610F\u5230\u7ED3\u70B9\u6807\u7B7E\u662F\u5355\u5C0F\u5199\u5B57\u6BCD\uFF0C\u6240\u4EE5\u5EFA\u6811\u540E\uFF0C\uFF0C\u4F7F\u7528 DFS \u904D\u5386\u4E00\u904D\u6811\u5373\u53EF\u5F97\u5230\u4EE5\u67D0\u79CD\u5C0F\u5199\u5B57\u6BCD\u4E3A\u6807\u7B7E\u7ED3\u70B9\u7684\u7EDF\u8BA1\u7ED3\u679C\uFF0C\u904D\u5386 26 \u904D\u5373\u53EF\u5F97\u5230\u5168\u90E8\u7ED3\u679C\u3002\n\n\u0060\u0060\u0060cpp\nvector\u003Cint\u003E g[100005];\nint _count[26][100005];\nint ch = 0;\nstring *l;\nint *cur = NULL;\nvoid dfs(int u, int pa)\n{\n    cur[u] = 0;\n    if (l-\u003Eat(u) - \u0027a\u0027 == ch)\n    {\n        cur[u]\u002B\u002B;\n    }\n    for (int v : g[u])\n    {\n        if (v == pa)\n            continue;\n        dfs(v, u);\n        cur[u] \u002B= cur[v];\n    }\n}\n\nclass Solution\n{\npublic:\n    vector\u003Cint\u003E countSubTrees(int n, vector\u003Cvector\u003Cint\u003E\u003E \u0026edges, string labels)\n    {\n        for (int i = 0; i \u003C n; i\u002B\u002B)\n            g[i].clear();\n        for (vector\u003Cint\u003E \u0026e : edges)\n        {\n            g[e[0]].push_back(e[1]);\n            g[e[1]].push_back(e[0]);\n        }\n        l = \u0026labels;\n        for (ch = 0; ch \u003C 26; ch\u002B\u002B)\n        {\n            cur = _count[ch];\n            dfs(0, -1);\n        }\n        vector\u003Cint\u003E result;\n        for (int i = 0; i \u003C n; i\u002B\u002B)\n        {\n            result.push_back(_count[labels.at(i) - \u0027a\u0027][i]);\n        }\n        return result;\n    }\n};\n\u0060\u0060\u0060"},"Title":"LeetCode-5465 \u5B50\u6811\u4E2D\u6807\u7B7E\u76F8\u540C\u7684\u8282\u70B9\u6570","Category":{"Items":["Problems"]},"Keywords":{"Items":["leetcode"]},"CreationTime":"2020-07-19T12:30:23+08:00","ModificationTime":"2020-07-19T12:30:23+08:00"}