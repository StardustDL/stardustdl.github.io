{"Id":"Problems/leetcode-23","Type":0,"Author":"","Content":{"Tag":"","Raw":"\n\u4F7F\u7528\u4F18\u5148\u961F\u5217\u8FDB\u884C $K$ \u8DEF\u5F52\u5E76\u3002\n\n\u0060\u0060\u0060cpp\nstruct cmp\n{\n    bool operator()(ListNode *a, ListNode *b) { return a-\u003Eval \u003E b-\u003Eval; }\n};\nclass Solution\n{\npublic:\n    ListNode *mergeKLists(vector\u003CListNode *\u003E \u0026lists)\n    {\n        ListNode *head = nullptr, *tail = nullptr;\n        priority_queue\u003CListNode *, vector\u003CListNode *\u003E, cmp\u003E pq;\n        for (auto t : lists)\n            if (t != nullptr)\n                pq.push(t);\n        while (!pq.empty())\n        {\n            auto t = pq.top();\n            pq.pop();\n            if (head == nullptr)\n            {\n                head = tail = t;\n            }\n            else\n            {\n                tail-\u003Enext = t;\n                tail = t;\n            }\n            if (t-\u003Enext != nullptr)\n                pq.push(t-\u003Enext);\n        }\n        return head;\n    }\n};\n\u0060\u0060\u0060"},"Title":"LeetCode-23 \u5408\u5E76K\u4E2A\u6392\u5E8F\u94FE\u8868","Category":{"Items":["Problems"]},"Keywords":{"Items":["leetcode"]},"CreationTime":"2020-07-28T16:20:50+08:00","ModificationTime":"2020-07-28T16:20:50+08:00"}