{"Id":"Problems/leetcode-56","Type":2,"Author":"","Content":{"Tag":"","Raw":"\n\u6309\u533A\u95F4\u8D77\u70B9\u5347\u5E8F\u6392\u5E8F\uFF0C\u4F9D\u6B21\u5904\u7406\uFF0C\u7EF4\u62A4\u5F53\u524D\u533A\u95F4\u7684\u7EC8\u70B9\uFF0C\u5224\u65AD\u662F\u5426\u76F8\u4EA4\uFF0C\u5E76\u6269\u5C55\u7EC8\u70B9\u3002\n\n\u0060\u0060\u0060rust\nuse std::cmp::Ordering;\n\nimpl Solution {\n    pub fn merge(intervals: Vec\u003CInterval\u003E) -\u003E Vec\u003CInterval\u003E {\n        if intervals.len() \u003C= 1 {\n            return intervals;\n        }\n        let mut intervals = intervals;\n        intervals.sort_by(|a, b| {\n            if a.start \u003C b.start || a.start == b.start \u0026\u0026 a.end \u003C b.end {\n                Ordering::Less\n            } else if a == b {\n                Ordering::Equal\n            } else {\n                Ordering::Greater\n            }\n        });\n        let mut res = Vec::new();\n        let mut last = Interval { ..intervals[0] };\n        for val in intervals.into_iter().skip(1) {\n            if val.start \u003C= last.end {\n                last.end = std::cmp::max(last.end, val.end);\n            } else {\n                res.push(last);\n                last = val;\n            }\n        }\n        res.push(last);\n        res\n    }\n}\n\u0060\u0060\u0060"},"Title":"LeetCode-56 \u5408\u5E76\u533A\u95F4","Category":{"Items":["Problems"]},"Keywords":{"Items":["leetcode"]},"CreationTime":"2020-07-28T16:53:05+08:00","ModificationTime":"2020-07-28T16:53:05+08:00"}