<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tools on StardustDL's Blog</title><link>https://stardustdl.github.io/posts/tools/</link><description>Recent content in Tools on StardustDL's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 24 Jul 2020 19:30:40 +0800</lastBuildDate><atom:link href="https://stardustdl.github.io/posts/tools/index.xml" rel="self" type="application/rss+xml"/><item><title>psake</title><link>https://stardustdl.github.io/posts/tools/psake/</link><pubDate>Fri, 24 Jul 2020 19:30:40 +0800</pubDate><guid>https://stardustdl.github.io/posts/tools/psake/</guid><description>基本信息 psake 是一个自动化构建工具，基于 PowerShell 构建，提供了类似 Make 的构建功能。
安装 # Set-PSRepository -Name PSGallery -InstallationPolicy Trusted Install-Module -Name psake 使用 创建 psakefile.ps1，然后使用以下命令
Invoke-psake # Get-Help Invoke-psake -full psakefile 结构 Function Description Required Include() Call this function to have psake include the functions of another file into your script no Properties() Call this function to set your properties no Task() This is the main function that you write to execute a step in your build script.</description></item><item><title>GitHub Actions - Workflow</title><link>https://stardustdl.github.io/posts/tools/github-workflow/</link><pubDate>Fri, 24 Jul 2020 18:30:40 +0800</pubDate><guid>https://stardustdl.github.io/posts/tools/github-workflow/</guid><description>基本信息 GitHub Actions 中的 Workflow 提供了基于仓库相关事件驱动的工作流，可以基于此实现持续集成，持续部署等功能。
基础使用 # Trigger eventon:# Trigger the workflow on push or pull request,# but only for the master branchpush:branches:- masterpull_request:# global env variablesenv:SERVER:production# default configdefaults:run:shell:bashworking-directory:scripts# all jobsjobs:job1:name:My first jobruns-on:ubuntu-latestjob2:name:My second jobneeds:job1strategy:matrix:node:[6,8,10]env:defaults:# When set to true, GitHub cancels all in-progress jobs if any matrix job fails.fail-fast:true# Prevents a workflow run from failing when a job fails. Set to true to allow a workflow run to pass when this job fails.</description></item><item><title>Dockerfile</title><link>https://stardustdl.github.io/posts/tools/proglang-dockerfile/</link><pubDate>Mon, 12 Nov 2018 19:37:36 +0800</pubDate><guid>https://stardustdl.github.io/posts/tools/proglang-dockerfile/</guid><description>基本信息 Dockerfile 为 Docker 提供镜像构建命令及描述。 Docker 书写思想： 自动化，无交互 顺序相关 清理 易读 基础语法 // 注释 INSTRUCTION arguments 指令格式，一般指令名大写 指令 FROM 指定基础镜像，必须是第一句有效指令。
FROM&amp;lt;imagesName:tag&amp;gt;多个 FROM 指令使用最后一个。
MAINTAINER 设置维护者信息。
MAINTAINERName &amp;lt;Email&amp;gt;RUN 运行指定命令。
shell 格式 RUN echo HelloWorld exec 格式（不启动 shell） RUN [&amp;#34;prog&amp;#34;, &amp;#34;arg1&amp;#34;, &amp;#34;arg2&amp;#34;]ENV 设置镜像的环境变量。
ENV &amp;lt;key&amp;gt; &amp;lt;value&amp;gt;COPY 将本地文件或文件夹复制到镜像指定路径下。
COPY /local/path/file /images/path/fileADD 可从本地或网上获取，存储到镜像指定路径下，也可对文件自动解包。
ADD file /images/path/fileADD latest.tar.gz /var/www/ 相同复制命令下，ADD 构建的镜像比 COPY 构建的镜像大 不能对构建目录或上下文之外的文件进行 ADD 操作：不能使用 .</description></item><item><title>YAML Ain't Markup Language</title><link>https://stardustdl.github.io/posts/tools/proglang-yaml/</link><pubDate>Mon, 12 Nov 2018 10:20:00 +0800</pubDate><guid>https://stardustdl.github.io/posts/tools/proglang-yaml/</guid><description>基本信息 官网 介绍：YAML 是一种数据序列化语言，旨在对人类友好，并与现代编程语言配合使用，以执行常见的日常任务。 优点 YAML的可读性好。 YAML和脚本语言的交互性好。 YAML使用实现语言的数据类型。 YAML有一个一致的信息模型。 YAML易于实现。 语法 基础语法 大小写敏感 使用缩进表示层级关系 缩进时不允许使用 Tab 键，只允许使用空格。 缩进的空格数目不重要，只要相同层级的元素左侧对齐即可 # 表示注释，从这个字符一直到行尾，都会被解析器忽略。 基础结构 对象 对象，键值对的集合，又称为映射（mapping）/ 哈希（hashes） / 字典（dictionary）。使用冒号结构表示。也可将所有键值对写成一个行内对象。
animal:petshash:{name: Steve, foo:bar } 数组 数组，一组按次序排列的值，又称为序列（sequence） / 列表（list）。
- Cat- Dog- Goldfishanimal:[Cat, Dog]纯量 纯量是最基本的、不可再分的值。支持的类型有：
布尔值：true false 整数，浮点数：字面量 12.30 Null：~ 时间：ISO8601 格式 2001-12-14t21:59:43.10-05:00 日期：复合 iso8601 格式的年、月、日表示 1976-07-31 使用两个感叹号，可强制转换类型。
e:!!str123f:!!strtrue字符串 默认不使用引号表示 如果字符串之中包含空格或特殊字符，需要放在引号之中 单引号和双引号都可以使用，双引号不会对特殊字符转义 单引号之中如果还有单引号，必须连续使用两个单引号转义 字符串可以写成多行，从第二行开始，必须有一个单空格缩进。换行符会被转为空格 多行字符串可以使用 | 保留换行符，也可以使用 &amp;gt; 折叠换行 + 表示保留文字块末尾的换行，- 表示删除字符串末尾的换行。 str:这是一行字符串s1:&amp;#39;内容\n字符串&amp;#39;s2:&amp;#34;内容\n字符串&amp;#34;str:&amp;#39;labor&amp;#39;&amp;#39;s day&amp;#39;str:这是一段多行字符串this:|Foo Barthat:&amp;gt;Foo Bar s1:|Foos2:|+Foos3:|-Foo引用 &amp;amp; 建立锚点 &amp;lt;&amp;lt; 合并到当前数据 * 引用锚点 defaults:&amp;amp;defaultsadapter:postgreshost:localhostdevelopment:database:myapp_development&amp;lt;&amp;lt;:*defaultstest:database:myapp_test&amp;lt;&amp;lt;:*defaults# 等价于defaults:adapter:postgreshost:localhostdevelopment:database:myapp_developmentadapter:postgreshost:localhosttest:database:myapp_testadapter:postgreshost:localhost参考资料 YAML Version 1.</description></item><item><title>GDB - The GNU Project Debugger</title><link>https://stardustdl.github.io/posts/tools/gdb/</link><pubDate>Thu, 27 Sep 2018 18:58:19 +0800</pubDate><guid>https://stardustdl.github.io/posts/tools/gdb/</guid><description>基本信息 官网 介绍：一种支持多种语言的调试器。 基础知识 使用 gdb 调试 C 程序时，建议在程序编译时加入调试符号信息 -g 选项。
gdb a.out 可以使用 --tui 选项进入终端用户界面图形化调试。Ctrl + X + A 切换 TUI 和传统模式。
命令 描述 help h 帮助 quit q 退出 查看程序 list 或 l：查看源代码。
list -5 # show line 5 list func # show func disassemble 查看汇编码。
/m # 源码和汇编一起排列 /r # 显示16进制代码 disassemble /m main 布局 layout 命令用于分割窗口，可以一边查看代码，一边测试。</description></item><item><title>PowerShell</title><link>https://stardustdl.github.io/posts/tools/powershell/</link><pubDate>Thu, 27 Sep 2018 18:40:02 +0800</pubDate><guid>https://stardustdl.github.io/posts/tools/powershell/</guid><description>基本信息 官网 介绍：Powershell 是一个执行系统和应用程序管理自动化的命令行脚本环境。需要.NET环境的支持，同时支持.NET对象。Powershell 中每个内容都是对象，.NET 中的对象相关操作可以在 Powershell 中调用。 基础知识 快捷键 快捷键 功能 ALT+F7 清除命令的历史记录 PgUp PgDn 显示当前会话的第一个命令和最后一个命令 Enter 执行当前命令 End 将光标移至当前命令的末尾 Del 从右开始删除输入的命令字符 Esc 清空当前命令行 F2 自动补充历史命令至指定字符 F4 删除命令行至光标右边指定字符处 F7 对话框显示命令行历史记录 F8 检索包含指定字符的命令行历史记录 F9 根据命令行的历史记录编号选择命令，历史记录编号可以通过F7查看 左/右方向键 左右移动光标 上/下方向键 切换命令行的历史记录 Home 光标移至命令行最左端 Backspace 从右删除命令行字符 Ctrl+C 取消正在执行的命令 Ctrl+左/右方向键 在单词之间移动光标 Ctrl+Home 删除光标最左端的所有字符 Tab 自动补齐命令或者文件名 管道和重定向 管道：把上一条命令的输出作为下一条命令的输入。使用字符 |。 传统的Cmd管道是基于文本的，但是Powershell是基于对象。</description></item><item><title>Git</title><link>https://stardustdl.github.io/posts/tools/git/</link><pubDate>Wed, 26 Sep 2018 18:58:19 +0800</pubDate><guid>https://stardustdl.github.io/posts/tools/git/</guid><description>基本信息 官网 介绍：一个分布式版本管理系统。 特点 Git 更像是把数据看作是对小型文件系统的一组快照。每次你提交更新，或在 Git 中保存项目状态时，它主要对当时的全部文件制作一个快照并保存这个快照的索引。为了高效，如果文件没有修改，Git 不再重新存储该文件，而是只保留一个链接指向之前存储的文件。Git 对待数据更像是一个快照流。Git 更像是一个小型的文件系统，提供了许多以此为基础构建的超强工具。 在 Git 中的绝大多数操作都只需要访问本地文件和资源，一般不需要来自网络上其它计算机的信息。 Git 中所有数据在存储前都计算校验和，然后以校验和来引用。这意味着不可能在 Git 不知情时更改任何文件内容或目录内容。这个功能建构在 Git 底层，是构成 Git 哲学不可或缺的部分。Git 用以计算校验和的机制叫做 SHA-1 散列。实际上，Git 数据库中保存的信息都是以文件内容的哈希值来索引，而不是文件名。 你执行的 Git 操作，几乎只往 Git 数据库中增加数据。很难让 Git 执行任何不可逆操作，或者让它以任何方式清 除数据。同别的 VCS 一样，未提交更新时有可能丢失或弄乱修改的内容；但是一旦你提交快照到 Git 中，就难以再丢失数据，特别是如果你定期的推送数据库到其它仓库的话。
基础知识 Git 有三种状态，你的文件可能处 于其中之一：已提交（committed）、已修改（modified）和已暂存（staged）。
已提交表示数据已经安全的保存在本地数据库中。 已修改表示修改了文件，但还没保存到数据库中。 已暂存表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。 由此引入 Git 项目的三个工作区域的概念：Git 仓库、工作目录以及暂存区域。
Git 仓库目录是 Git 用来保存项目的元数据和对象数据库的地方。这是 Git 中最重要的部分，从其它计算机克隆仓库时，拷贝的就是这里的数据。 工作目录是对项目的某个版本独立提取出来的内容。这些从 Git 仓库的压缩数据库中提取出来的文件，放在磁盘上供你使用或修改。 暂存区域是一个文件，保存了下次将提交的文件列表信息，一般在 Git 仓库目录中。有时候也被称作索引，不过一般说法还是叫暂存区域。 基本的 Git 工作流程如下：</description></item><item><title>GCC - The GNU Compiler Collection</title><link>https://stardustdl.github.io/posts/tools/gcc/</link><pubDate>Wed, 19 Sep 2018 18:58:19 +0800</pubDate><guid>https://stardustdl.github.io/posts/tools/gcc/</guid><description>基本信息 官网 介绍：GCC，The GNU Compiler Collection，包含多种语言（C, C++, Objective-C, Fortran, Ada, Go) 的前端编译器。携带了相关的库。 安装 可以通过 build-essential 包安装。
apt install build-essential C/C++ C 语言：使用 gcc 或 g++ 编译。对于 C 语言文件，g++ 内部调用 gcc。 C++ 语言：使用 g++ 编译 ，由于 C++ 与 C 库文件命名不同，在编译链接过程中 g++ 能找到合适的库文件，而 gcc 不能。 编译分4个阶段：预处理、生成汇编码、编译（生成机器码）、链接
相关编译指令，参数：
参数名 描述 &amp;lt;source names&amp;gt; 指定编译源文件 -E/e &amp;lt;source names&amp;gt; 只执行预处理操作（生成 .i 文件） -S/s &amp;lt;.</description></item><item><title>APT - Advanced Packaging Tool</title><link>https://stardustdl.github.io/posts/tools/apt/</link><pubDate>Wed, 19 Sep 2018 10:30:40 +0800</pubDate><guid>https://stardustdl.github.io/posts/tools/apt/</guid><description>基本信息 介绍：apt，Advanced Packaging Tool 是Linux下的一款安装包管理工具。常用于 Debian, Ubuntu 等系统。是 dpkg 的前端。 常用命令 很多 apt 命令需要管理员权限。
更新数据库 安装软件前常需更新软件包数据库，以保证信息是最新的。
apt update 查找 apt search &amp;lt;seach name&amp;gt; 查看 apt show &amp;lt;package_name&amp;gt; # 查看package内容 apt list # 查看软件包列表 list 选项 描述 --upgradeable 可升级 --installed 已安装 --all 系统中所有能找到的package -versions 所有版本 安装 apt install &amp;lt;package_name1&amp;gt; &amp;lt;package_name2&amp;gt; ... apt reinstall &amp;lt;package_name&amp;gt; # 重新安装包 选项 描述 --no-upgrade 安装该package但是不升级 --only-upgrade 升级该package =&amp;lt;version_number&amp;gt; 指定版本 卸载 apt remove &amp;lt;package_name&amp;gt; # 移除该package apt purge &amp;lt;package_name&amp;gt; # 彻底删除该package（包含配置文件） apt autoremove # 自动移除部分无用软件包 remove 选项 描述 --purge 删除包，包括删除配置文件 更新 apt upgrade 下载 apt download &amp;lt;package_name&amp;gt; 查看缓存中的所有包名 apt-cache pkgnames 参考资料 网络</description></item><item><title>Tmux</title><link>https://stardustdl.github.io/posts/tools/tmux/</link><pubDate>Mon, 17 Sep 2018 19:40:02 +0800</pubDate><guid>https://stardustdl.github.io/posts/tools/tmux/</guid><description>基本信息 官网 介绍：用于在一个终端窗口中运行多个终端会话的工具。 安装 apt install tmux 基础知识 快捷键前缀（Prefix） 为了使自身的快捷键和其他软件的快捷键互不干扰，Tmux 提供了一个快捷键前缀。当想要使用快捷键时，需要先按下快捷键前缀，然后再按下快捷键。
默认前缀：Ctrl+B 配置文件 Tmux 配置文件位于 ~/.tmux.conf，每当开启一个新的会话时，Tmux 都会先读取这个文件。
修改快捷键前缀 unbind C-b set -g prefix C-a 使用 vi 操作模式 # Use vim keybindings in copy mode setw -g mode-keys vi 基本操作 快捷键（需使用 Prefix） 描述 % 新建竖直窗格 &amp;quot; 新建水平窗格 方向键 在窗格间切换 c 创建窗口 窗口对应数字 切换窗口 滚屏 Prefix + [ 进入滚屏模式，q 退出。</description></item><item><title>SSH - Secure Shell</title><link>https://stardustdl.github.io/posts/tools/ssh/</link><pubDate>Mon, 17 Sep 2018 18:40:02 +0800</pubDate><guid>https://stardustdl.github.io/posts/tools/ssh/</guid><description>基本信息 介绍：较安全实现远程连接，控制，传输的一种工具。 基础知识 SSH之所以能够保证安全，原因在于它采用了公钥加密。整个过程是这样的：
远程主机收到用户的登录请求，把自己的公钥发给用户。 用户使用这个公钥，将登录密码加密后，发送回来。 远程主机用自己的私钥，解密登录密码，如果密码正确，就同意用户登录。 这个过程本身是安全的，但是实施的时候存在一个风险：如果有人截获了登录请求，然后冒充远程主机，将伪造的公钥发给用户，那么用户很难辨别真伪。因为不像https协议，SSH协议的公钥是没有证书中心1（CA）公证的，也就是说，都是自己签发的。
ssh 默认端口是 22 客户端 安装 apt install openssh-client 登录 以用户名 user ，登录远程主机 host
ssh user@host 使用 p 参数指定端口
ssh -p 2222 user@host 第一次登陆 ssh 会指出host主机的公钥指纹，可由此判断此主机是否是真实目标（防止中间人攻击）。确认后会要求输入密码。当远程主机的公钥被接受以后，它就会被保存在文件 $HOME/.ssh/known_hosts之中。下次再连接这台主机，系统就会认出它的公钥已经保存在本地了，从而跳过警告部分，直接提示输入密码。
公钥登录 所谓&amp;quot;公钥登录&amp;quot;，原理很简单，就是用户将自己的公钥储存在远程主机上。登录的时候，远程主机会向用户发送一段随机字符串，用户用自己的私钥加密后，再发回来。远程主机用事先储存的公钥进行解密，如果成功，就证明用户是可信的，直接允许登录shell，不再要求密码。这种方法要求用户必须提供自己的公钥。如果没有现成的，可以直接用 ssh-keygen 生成一个。 然后使用 ssh-copy-id user@host 命令，将公钥传送到远程主机host上（也可直接修改远程主机公钥存储文件）。 远程主机将用户的公钥，保存在登录后的用户主目录的 $HOME/.ssh/authorized_keys 文件中。公钥就是一段字符串，只要把它追加在 authorized_keys 文件的末尾就行了。 如果远程主机禁用了公钥登录，修改远程主机上的 /etc/ssh/sshd_config 后重启服务：
RSAAuthentication yes PubkeyAuthentication yes AuthorizedKeysFile .ssh/authorized_keys 单句执行 ssh user@host &amp;#39;mkdir -p .ssh &amp;amp;&amp;amp; cat &amp;gt;&amp;gt; .</description></item><item><title>NuGet</title><link>https://stardustdl.github.io/posts/tools/nuget/</link><pubDate>Mon, 17 Sep 2018 17:40:02 +0800</pubDate><guid>https://stardustdl.github.io/posts/tools/nuget/</guid><description>基本信息 官网 介绍：.NET 平台上的包管理器。支持创建，共享，安装，管理包。 特点：NuGet 提供支持专用托管的中心 nuget.org 存储库。NuGet 为开发人员提供创建、发布和使用包所需的工具。最重要的是，NuGet 能维护项目中所用包的引用列表，并且能够通过该列表还原和更新这些包。NuGet 管理包缓存和全局包文件夹，使安装和重新安装过程更为快捷。 使用包 NuGet 会记住每个已安装包的标识和版本号，并将其录制到 packages.config 或项目文件（使用 PackageReference）中，具体取决于项目类型和 NuGet 版本。 使用 NuGet 4.0+，PackageReference 为首选方法。
&amp;lt;package id=&amp;#34;Newtonsoft.json&amp;#34; version=&amp;#34;6.0.4&amp;#34; allowedVersions=&amp;#34;[6,7)&amp;#34; /&amp;gt; &amp;lt;PackageReference Include=&amp;#34;Newtonsoft.json&amp;#34; Version=&amp;#34;[6, 7)&amp;#34; /&amp;gt; 查找包 搜索语法：
关键字：搜索操作将查找包含任何给定关键字的相关包。 示例：modern UI。 若要搜索包含所有给定关键字的包，请在搜索词之间使用“+”，例如 modern+UI。 短语：在引号内输入搜索词可查找与其大小写完全匹配的匹配项。 示例：&amp;quot;modern UI&amp;quot; package 筛选：可以按照语法 &amp;lt;property&amp;gt;:&amp;lt;term&amp;gt; 使用搜索词来搜索特定属性，其中，&amp;lt;property&amp;gt;（区分大小写）可为 id,packageid,version,title,tags,author,description,summary 和 owner。 可将搜索词添加在引号中（如需要），还可以同时搜索多个属性。 此外，按 id 属性搜索得到的是子字符串匹配项，而按 s 搜索将得到确切匹配。 id:NuGet.Core # Match any part of the id property Id:&amp;quot;Nuget.Core&amp;quot; ID:jQuery title:jquery # Searches title as cliown on the package listing PackageId:jquery # Match the package id exactly id:jquery id:ui # Search for multiple terms in the id id:jquery tags:validation # Search multiple properties id:&amp;quot;jquery.</description></item><item><title>Make</title><link>https://stardustdl.github.io/posts/tools/make/</link><pubDate>Sun, 16 Sep 2018 18:58:19 +0800</pubDate><guid>https://stardustdl.github.io/posts/tools/make/</guid><description>基本信息 官网 介绍：一个能处理依赖关系，进行自动化编译的工具。 make 不仅可以用于处理程序编译过程，也可以处理更多的含依赖关系的事务 基础知识 GNU的 make 工作时的执行步骤如下：
读入所有的Makefile。 读入被include的其它Makefile。 初始化文件中的变量。 推导隐晦规则，并分析所有规则。 为所有的目标文件创建依赖关系链。 根据依赖关系，决定哪些目标要重新生成。 执行生成命令。</description></item><item><title>Makefile</title><link>https://stardustdl.github.io/posts/tools/proglang-makefile/</link><pubDate>Sun, 16 Sep 2018 10:20:00 +0800</pubDate><guid>https://stardustdl.github.io/posts/tools/proglang-makefile/</guid><description>基本信息 Makefile 为 make 提供依赖描述和编译指令等设置。 基础知识 注释 # 转义 \ 通配符：* ? ~ 显式规则 Makefile 规则：指定依赖关系与生成命令。
target ... : prerequisites ... command ... ... targets : prerequisites ; command command ... target 可以是一个object file（目标文件），也可以是一个执行文件，还可以是一个标签。可以使用通配符。 prerequisites 生成该target所依赖的文件和/或target command 该target要执行的命令（任意的shell命令），如果其不与“target:prerequisites”在一行，那么，必须以 Tab 键开头，如 果和prerequisites在一行，那么可以用分号做为分隔。 prerequisites中如果有一个以上的文件比target文件要新的话，command所定义的命令就会被执行。
还可以通过这种方式表达依赖关系，多个目标依赖一个文件：
kbd.o command.o files.o : command.h display.o insert.o search.o files.o : buffer.h Make 将第一个目标作为最终目标 没有依赖项的目标一般不会被自动执行（除非是第一个），需要向 make 传递参数来执行特定目标 可以使用 \ 折行 多目标 有可能我们的多个目标同时依赖于一个文件，并且 其生成的命令大体类似。可以使用自动化变量 $@。</description></item><item><title>Verilog HDL</title><link>https://stardustdl.github.io/posts/tools/proglang-verilog/</link><pubDate>Wed, 12 Sep 2018 17:50:16 +0800</pubDate><guid>https://stardustdl.github.io/posts/tools/proglang-verilog/</guid><description>基本信息 介绍：Verilog HDL是一种硬件描述语言，用于从算法级、门级到开关级的多种抽象设计层次的 数字系统建模。被建模的数字系统对象的复杂性可以介于简单的门和完整的电子数字系统之 间。数字系统能够按层次描述，并可在相同描述中显式地进行时序建模。 基础知识 注释 // one-line comment /* multi-line comment */ 标识符 Verilog HDL中的标识符可以是任意一组字母、数字、$ 符号和 _ （下划线）符号的 组合，但标识符的第一个字符必须是字母或者下划线。另外，标识符是区分大小写的。 转义标识符可以在一条标识符中包含任何可打印字符。转义标识符以 \ （反斜线）符号开头，以空白结尾（空白可以是一个空格、一个制表字符或换行符）。反斜线和结束空格并不是转义标识符的一部分。转义标识符与关键词并不完全相同。标识符 \initial 与标识符 initial（这是个关键词）不同。
值 基本值 0 ：逻辑 0 1 ：逻辑 1 x ：位置 z ：高阻 常量 整型 简单十进制表示 12,-15
基数表示法 [size] 'base value
size 定义以位计的常量的位长 base ：进制（o/O,b/B,d/D,h/H） x（或z）在十六进制值中代表4位x（或z），在八进制中代表3位x（或z），在二进制中代表1位x（或z）。 基数格式计数形式的数通常为无符号数。这种形式的整型数的长度定义是可选的。如果没有定义一个整数型的长度，数的长度为相应值中定义的位数。 如果定义的长度比为常量指定的长度长，通常在左边填0补位。但是如果数最左边一位为 x或z，就相应地用x或z在左边补位。 如果长度定义得更小，那么最左边的位相应地被截断。 ？字符在数中可以代替值z在值z被解释为不分大小写的情况下提高可读性。
实数 十进制计数法 2.0 0.1 科学计数法 23_5.1e2 5E-4 实数通过四舍五入被转换为最相近的整数。</description></item><item><title>Cascading Style Sheets</title><link>https://stardustdl.github.io/posts/tools/proglang-css/</link><pubDate>Sat, 08 Sep 2018 10:30:40 +0800</pubDate><guid>https://stardustdl.github.io/posts/tools/proglang-css/</guid><description>基本信息 介绍：CSS 存储 HTML 样式，定义如何显示 HTML 元素。 在 HTML 中使用样式表，参见 {% post_link tool/progLang-HTML %} 层叠 样式表允许以多种方式规定样式信息。样式可以规定在单个的 HTML 元素中，在 HTML 页的头元素中，或在一个外部的 CSS 文件中。甚至可以在同一个 HTML 文档内部引用多个外部样式表。 当同一个 HTML 元素被不止一个样式定义时，层叠顺序如下，其中数字 4 拥有最高的优先权。
浏览器缺省设置 外部样式表 内部样式表（位于 标签内部） 内联样式（在 HTML 元素内部） 因此，内联样式（在 HTML 元素内部）拥有最高的优先权，这意味着它将优先于以下的样式声明： 标签中的样式声明，外部样式表中的样式声明，或者浏览器中的样式声明（缺省值）。
通过 CSS 继承，子元素将继承最高级元素所拥有的属性
语法 CSS 规则由两个主要的部分构成：选择器，以及一条或多条声明。
selector {declaration1; declaration2; ... declarationN } selector {property: value} h1 {color:red; font-size:14px;} 选择器：指定需要改变样式的 HTML 元素。 每条声明由一个属性和一个值组成。 如果要定义不止一个声明，则需要用分号将每个声明分开。 属性（property）是设置的样式属性（style attribute）。每个属性有一个值。 属性和值被冒号分开。 如果值为若干单词，则要给值加引号。 CSS 对大小写不敏感。不过存在一个例外：如果涉及到与 HTML 文档一起工作的话，class 和 id 名称对大小写是敏感的。</description></item><item><title>Hyper Text Markup Language</title><link>https://stardustdl.github.io/posts/tools/proglang-html/</link><pubDate>Thu, 06 Sep 2018 14:16:00 +0800</pubDate><guid>https://stardustdl.github.io/posts/tools/proglang-html/</guid><description>基本信息 介绍：一种描述网页的标记语言。 相关：XHTML（可扩展超文本标记语言，更严格更纯净的 HTML 版本） 语法 HTML 文档描述网页 HTML 文档包含 HTML 标签和纯文本 HTML 标记标签通常被称为 HTML 标签。 HTML 标签是由尖括号包围的关键词，比如 &amp;lt;html&amp;gt; HTML 标签通常是成对出现的，比如 &amp;lt;b&amp;gt; 和 &amp;lt;/b&amp;gt; 标签对中的第一个标签是开始标签，第二个标签是结束标签 开始和结束标签也被称为开放标签和闭合标签 HTML 元素指的是从开始标签（start tag）到结束标签（end tag）的所有代码。 HTML 元素以开始标签起始 HTML 元素以结束标签终止 元素的内容是开始标签与结束标签之间的内容 某些 HTML 元素具有空内容（empty content） 空元素在开始标签中进行关闭（以开始标签的结束而结束） 大多数 HTML 元素可拥有属性 HTML 标签可以拥有属性。属性提供了有关 HTML 元素的更多的信息。 属性总是以名称/值对的形式出现，比如：name=&amp;quot;value&amp;quot;。 属性总是在 HTML 元素的开始标签中规定。 HTML 块元素：块级元素在浏览器显示时，通常会以新行来开始（和结束）。 HTML 内联元素：内联元素在显示时通常不会以新行开始。 颜色：#000000 = rgb(0,0,0) &amp;lt;!</description></item><item><title>Vim</title><link>https://stardustdl.github.io/posts/tools/vim/</link><pubDate>Thu, 06 Sep 2018 10:20:00 +0800</pubDate><guid>https://stardustdl.github.io/posts/tools/vim/</guid><description>基本信息 官网 介绍：Vim 是一个功能非常强大，且具有很强扩展性的编辑器。 安装 apt install vim 基础 i 插入模式（当前字符之前） h j k l 四方向移动 x 删除当前字符 dd 删除当前行 J 删除换行符 u 撤销 Ctrl+R 重做 U 撤销当前行的所有操作 a 插入模式（当前字符之后） I 移动前行第一个非空字符，进入插入模式 A 移动到行尾字符，进入插入模式 o 下方建立新行，进入插入模式 O 上方建立新行，进入插入模式 移动 计数+动作=多次执行
词移动 w b 到前/后词首 e ge 到前/后词尾 W B 到前/后词首 E gE 到前/后词尾 行中移动 $ 行尾 ^ 第一个非空字符 O 行首 行中指定字符 fx Fx 向前/后字符x tx Tx 向前/后字符x前 ; 重复上个命令 , 反向重复上个命令 匹配括号 % 指定行 2G 第二行 G 文件末 gg 文件首 50% 移动到文本的50%位置 滚屏 Ctrl+U/D 上/下半屏 Ctrl+E/Y 上/下一行 Ctrl+F/B 上/下一屏 zz 光标到中间 zt 光标到顶部 zb 光标到底部 查找 /str 查找下一个 str，支持方向键访问历史，历史模式匹配 n 下一个匹配项 ?</description></item><item><title>Structured Query Language</title><link>https://stardustdl.github.io/posts/tools/proglang-sql/</link><pubDate>Mon, 03 Sep 2018 18:51:10 +0800</pubDate><guid>https://stardustdl.github.io/posts/tools/proglang-sql/</guid><description>基本信息 介绍：结构化查询语言，用于存取数据以及查询、更新和管理关系数据库系统。存在着很多不同版本的 SQL 语言，但是为了与 ANSI 标准相兼容，它们必须以相似的方式共同地来支持一些主要的关键词。但许多相似语义的内容其具体写法可能会有不同。 SQL 对大小写不敏感。 SQL 使用单引号来环绕文本值（大部分数据库系统也接受双引号）。 使用 SQL 需先了解具体数据库的描述方法。
数据操作语言 SELECT SELECT 语句用于从表中选取数据。
SELECTcolumnFROMtable_name 从名为 &amp;ldquo;Persons&amp;rdquo; 的数据库表，获取名为 &amp;ldquo;LastName&amp;rdquo; 和 &amp;ldquo;FirstName&amp;rdquo; 的列的内容 SELECTLastName,FirstNameFROMPersons 从 &amp;ldquo;Persons&amp;rdquo; 表中选取所有的列。 SELECT*FROMPersonsDISTINCT 关键词 DISTINCT 用于返回唯一不同的值。
从 Company&amp;quot; 列中仅选取唯一不同的值 SELECTDISTINCTCompanyFROMOrdersWHERE 如需有条件地从表中选取数据，可将 WHERE 子句添加到 SELECT 语句。
选取居住在城市 &amp;ldquo;Beijing&amp;rdquo; 中的人 SELECT*FROMPersonsWHERECity=&amp;#39;Beijing&amp;#39;可用运算符：
操作符 描述 = 等于 &amp;lt;&amp;gt; 不等于 &amp;gt; 大于 &amp;lt; 小于 &amp;gt;= 大于等于 &amp;lt;= 小于等于 BETWEEN 在某个范围内 IN 规定多个可能取值 LIKE 搜索某种模式 AND 合取两个条件 OR 析取两个条件 NOT 条件取反 SELECT*FROMPersonsWHERE(FirstName=&amp;#39;Thomas&amp;#39;ORFirstName=&amp;#39;William&amp;#39;)ANDLastName=&amp;#39;Carter&amp;#39;LIKE LIKE 操作符用于在 WHERE 子句中搜索列中的指定模式。</description></item><item><title>PHP Hypertext Preprocessor</title><link>https://stardustdl.github.io/posts/tools/proglang-php/</link><pubDate>Mon, 03 Sep 2018 10:20:00 +0800</pubDate><guid>https://stardustdl.github.io/posts/tools/proglang-php/</guid><description>基本信息 官网 介绍：PHP 是一种创建动态交互性站点的强有力的服务器端脚本语言。PHP 脚本在服务器上执行，然后向浏览器发送回纯 HTML 结果。 安装：使用支持 PHP 的 Web 主机，安装 PHP 和 MySQL 语法 PHP 脚本可放置于文档中的任何位置。 PHP 脚本以 &amp;lt;?php 开头，以 ?&amp;gt; 结尾： PHP 文件的默认文件扩展名是 &amp;ldquo;.php&amp;rdquo;。 PHP 文件通常包含 HTML 标签以及一些 PHP 脚本代码。 语句以分号结尾（;） 注释 // one-line # one-line /* multi-line */ 所有用户定义的函数、类和关键词（例如 if、else、echo 等等）都对大小写不敏感。所有变量都对大小写敏感。 变量 变量规则： 变量以 $ 符号开头，其后是变量的名称 变量名称必须以字母或下划线开头 变量名称不能以数字开头 变量名称只能包含字母数字字符和下划线（A-z、0-9 以及 _） 变量名称对大小写敏感（$y 与 $Y 是两个不同的变量） 变量会在首次为其赋值时被创建 作用域 函数之外声明的变量拥有 global 作用域，只能在函数以外进行访问。 函数内部声明的变量拥有 local 作用域，只能在函数内部进行访问。 static 关键词用于声明静态局部变量。 global 关键词用于访问函数内的全局变量。 PHP 同时在名为 $GLOBALS[index] 的数组中存储了所有的全局变量。下标存有变量名。这个数组在函数内也可以访问，并能够用于直接更新全局变量。 $x=5; $y=10; function myTest() { global $x,$y; $y=$x+$y; } myTest(); echo $y; // 输出 15 输出 echo 能够输出一个以上的字符串，无返回值。有无括号均可使用：echo 或 echo()。 print 只能输出一个字符串，并始终返回 1。有无括号均可使用：print 或 print()。 字符串中加入对变量，数组某位置的引用：</description></item><item><title>eXtensible Markup Language</title><link>https://stardustdl.github.io/posts/tools/proglang-xml/</link><pubDate>Sun, 02 Sep 2018 18:16:01 +0800</pubDate><guid>https://stardustdl.github.io/posts/tools/proglang-xml/</guid><description>基本信息 介绍：XML 被设计用来传输和存储数据，具有自我描述性。 语法 XML 文档形成一种树结构。
所有元素都须有关闭标签。 标签对大小写敏感 必须正确地嵌套 必须包含根元素 属性值须加引号 空格会被保留 &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;ISO-8859-1&amp;#34;?&amp;gt; &amp;lt;root name=&amp;#34;_root&amp;#34;&amp;gt; &amp;lt;child&amp;gt; &amp;lt;subchild&amp;gt;.....&amp;lt;/subchild&amp;gt; &amp;lt;/child&amp;gt; &amp;lt;/root&amp;gt; 元数据（有关数据的数据）应当存储为属性，而数据本身应当存储为元素。
特殊字符 原字符 转义 &amp;lt; &amp;amp;lt; &amp;gt; &amp;amp;ge; &amp;amp; &amp;amp;amp; ' &amp;amp;apos; &amp;quot; &amp;amp;quot; 注释 &amp;lt;!-- comment --&amp;gt; 元素命名 名称可以含字母、数字以及其他的字符 名称不能以数字或者标点符号开始 名称不能以字符 “xml”（或者 XML、Xml）开始 名称不能包含空格 命名空间 定义 XML 命名空间属性被放置于元素的开始标签之中，并使用以下的语法：</description></item></channel></rss>