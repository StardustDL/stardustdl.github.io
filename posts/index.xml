<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on StardustDL's Blog</title><link>https://stardustdl.github.io/posts/</link><description>Recent content in Posts on StardustDL's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 04 Jul 2020 22:17:52 +0800</lastBuildDate><atom:link href="https://stardustdl.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>ImagingS 开发笔记</title><link>https://stardustdl.github.io/posts/images-dev/</link><pubDate>Sat, 04 Jul 2020 22:17:52 +0800</pubDate><guid>https://stardustdl.github.io/posts/images-dev/</guid><description>Project Source Demo Video 来源 最初的想法来自 计算机图形学的课程项目作业，其要求基于 Python + Qt 实现一个支持简单图元绘制的 GUI+CLI 程序。
之前一般仅使用 Python 写一些简单的小型项目。曾写过一个较大项目，但即使使用了类型标注，也很快随着项目复杂度的提升，遇到了维护瓶颈，大大影响开发效率，遂中断了开发。
这次是第一次使用 Python 开发图形用户界面的软件，也是第一次使用 Qt，考虑到这个项目的需求较为明确并且有足够的扩展可能，决定将此项目作为一个 Python 较大单人项目的练手，并规避以前 Python 项目遇到的一些问题。
Idea 根据课程项目的模板代码，发现此项目非常适合 OOP 模式设计。结合以前的 WPF 学习经历，决定依照 WPF 的设计思路，试图在 ImagingS 中复刻 WPF 的呈现模型。
图元 Geometry 对象描述图元及其绘制算法 绘图 Drawing 将各种图元绘制到 DrawingContext 上 绘图上下文 DrawingContext 提供具体绘图的抽象，统一 GUI 绘图和图片文件绘图。 通过这三个层次，将呈现系统的两部分：定义与呈现分离。
设计 核心的 API 集中在以下几个类中，其中与绘制抽象相关的大部分类均能在 WPF 绘制模型中找到对应。
图元类：各种图元的基类，定义了绘制算法（strokePoints）和变换。 class Geometry(PropertySerializable, ABC): def __init__(self) -&amp;gt; None: pass def transform(self) -&amp;gt; Optional[Transform]: pass def strokePoints(self, pen: Pen) -&amp;gt; Iterable[Point]: pass def fillPoints(self) -&amp;gt; Iterable[Point]: pass def inStroke(self, pen: Pen, point: Point) -&amp;gt; bool: pass def inFill(self, point: Point) -&amp;gt; bool: pass def transformed(self) -&amp;gt; Geometry: pass def bounds(self) -&amp;gt; Rect: pass 绘制类：所有可绘制元素的基类，定义了绘制函数（render）。对于图元对象，实现了 GeometryDrawing 来实际完成图元的绘制任务。 class Drawing(PropertySerializable, IdObject, ABC): def __init__(self) -&amp;gt; None: pass @abstractmethod def render(self, context: RenderContext) -&amp;gt; None: pass @property @abstractmethod def bounds(self) -&amp;gt; Rect: pass 绘图上下文类：对实际绘制的目标的抽象 class RenderContext(ABC): @abstractmethod def _point(self, position: Point, color: Color) -&amp;gt; None: pass @abstractmethod def bounds(self) -&amp;gt; Rect: pass def point(self, position: Point, color: Color) -&amp;gt; None: pass def points(self, positions: Iterable[Point], brush: Brush) -&amp;gt; None: pass 变换类：所有变换的基类，定义了如何将一个点变换到另一个点 class Transform(PropertySerializable, IdObject, ABC): def __init__(self) -&amp;gt; None: pass @abstractmethod def transform(self, origin: Point) -&amp;gt; Point: pass 文档类：定义了当前文档所包含的画刷，图元，画布大小等信息，实现了序列化操作 class Document(PropertySerializable, IdObject): def __init__(self) -&amp;gt; None: pass @property def brushes(self) -&amp;gt; IdObjectList[Brush]: pass @property def drawings(self) -&amp;gt; DrawingGroup: pass @property def size(self) -&amp;gt; Size: pass def save(self, file, format: DocumentFormat = DocumentFormat.</description></item></channel></rss>