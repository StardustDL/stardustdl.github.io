<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Reading on StardustDL's Blog</title><link>https://stardustdl.github.io/posts/reading/</link><description>Recent content in Reading on StardustDL's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 26 Aug 2018 10:30:40 +0800</lastBuildDate><atom:link href="https://stardustdl.github.io/posts/reading/index.xml" rel="self" type="application/rss+xml"/><item><title>C Traps and Pitfalls</title><link>https://stardustdl.github.io/posts/reading/c-traps-and-pitfalls/</link><pubDate>Sun, 26 Aug 2018 10:30:40 +0800</pubDate><guid>https://stardustdl.github.io/posts/reading/c-traps-and-pitfalls/</guid><description>书籍名：C Traps and Pitfalls 作者：Andrew Koenig 出版时间：1989-1-11 基本介绍：Andrew Koenig 是AT&amp;amp;T公司Shannon实验室大规模编程研究部门中的成员，同时也是C++标准委员会的项目编辑。作者以自己1985年在Bell实验室时发表的一篇论文为基础，结合自己的工作经验扩展成为这本对C程序员具有珍贵价值的经典著作。写作本书的出发点不是要批判C语言，而是要帮助C程序员绕过编程过程中的陷阱和障碍。本书写于 ANSI C 正式发布前。 第一章 词法陷阱 = 不同于 == &amp;amp;,| 不同于 &amp;amp;&amp;amp;,|| 词法分析中的贪心法：每一个符号应包含尽可能多的字符 如果整型常量以 0 开头，则被视为八进制，以 0x 开头，被视为十六进制。 字符串末尾有 \0 即 $0$ 第二章 语法陷阱 函数声明 声明的形式：类型+一组类似表达式的声明符 表示对声明符求值应返回一个指定类型的结果。
int a; //a 整型 a 整型 int *a; //*a 整型 a 指向整型的指针 int *g(); //*(g()) 整型 g 返回整形指针的函数 int (*h)(); //(*h)() 整型 h 指向返回整型的函数的指针 int (*f)(int); //(*f)(int) 整型 f 指向有一个整型参数，返回整型的函数的指针 声明省去标识符，即得到对应的类型转化符。</description></item><item><title>The C Programming Language</title><link>https://stardustdl.github.io/posts/reading/the-c-programming-language/</link><pubDate>Sun, 26 Aug 2018 09:30:40 +0800</pubDate><guid>https://stardustdl.github.io/posts/reading/the-c-programming-language/</guid><description>书籍名：The C Programming Language (Second Edition) 作者：Brian W. Kernighan / Dennis M. Ritchie 出版时间：1988-4-1 基本介绍：《C程序设计语言》原著 即为C语言的设计者Dennis M．Ritchie和著名的计算机科学家Brian W．Kernighan合著的 一本介绍C语言的权威经典著作。原著第1版中介绍的C语言成为后来广泛使用的C语言版本—— 标准C的基础。人们熟知的“Hello, World”程序就是由《C程序设计语言》首次引入的。原著第2版根据1987年制定的ANSIC标准做了适当的修订。 第二章 枚举 enum id{A=1,B=2,...} 字符串支持连接 &amp;quot;abc&amp;quot; &amp;quot;def&amp;quot;=&amp;quot;abcdef&amp;quot; ctype 中的函数与字符表无关 使用 unsigned 的变量在隐式转换时和具体实现有关要十分注意，可能不是预期的。 float 不会自动提升为 double 伪随机数算法 $[0,32767]$ 的伪随机整数 unsigned long int _next=1; int rand(){ _next=_next*1103515245+12345; return (unsigned int)(_next/65536)%32768; } void srand(unsigned int seed){_next=seed;} 逗号表达式从左到右求值，最右侧的表达式为其结果值。函数参数中的逗号不是逗号表达式，C语言没有定义其运算顺序 对于一个运算，左右表达式的运算先后是不确定的。 第三章 Shell-Sort void shellsort(int v[],int n){ for(int gap=n&amp;gt;&amp;gt;1;gap;gap&amp;gt;&amp;gt;=1) for(int i=gap;i&amp;lt;n;i++) for(int j=i-gap;j&amp;gt;=0 &amp;amp;&amp;amp; v[j]&amp;gt;v[j+gap];j-=gap) swap(v[j],v[j+gap]); } 第四章 external,internal 关键字修饰变量 register 关键字，寄存器变量地址不可访问 static 关键字修饰全局变量，使变量限定在当前编译文件中 预处理 宏定义 行末使用 \ 使用多行定义 undef 取消宏定义 替换文本中 #加在参数名前，则将会生成和参数书写完全相同的字符串 #define debug(expr) printf(#expr &amp;#34; = %g\n&amp;#34;,expr) ## 运算符 #define paste(a,b) a ## b paste(name,1) =&amp;gt; name1 条件 #if #endif #elif #else #ifdef = #if defined id #ifndef = #if !</description></item></channel></rss>